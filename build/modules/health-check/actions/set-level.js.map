{"version":3,"sources":["../../../../src/modules/health-check/actions/set-level.js"],"names":["LevelUnsupportedError","message","type","code","level","request","log","LEVELS","includes","resolve"],"mappings":";;;;;;;;;;;;;;AAAA;;;;;;AAEA,MAAMA,wBAAwB,qBAAW;AACvCC,WAAS,gEAD8B;AAEvCC,QAAU,8CAF6B;AAGvCC,QAAS,GAH8B;AAIvCC,SAAS;AAJ8B,CAAX,CAA9B;;kBAOeC,WAAW;AAAA,QAChBD,KADgB,GACNC,OADM,CAChBD,KADgB;;AAExB,MAAI,CAAC,oBAAYC,QAAQC,GAAR,CAAYC,MAAxB,EAAgCC,QAAhC,CAAyCJ,KAAzC,CAAL,EAAsD;AACpD,WAAO,kBAAQK,OAAR,CAAgBT,sBAAsB,EAAEI,KAAF,EAAtB,CAAhB,CAAP;AACD;;AAED,SAAO,kBAAQK,OAAR,CAAgBJ,QAAQC,GAAR,CAAYF,KAAZ,GAAoBA,KAApC,CAAP;AACD,C","file":"set-level.js","sourcesContent":["import TypedError from 'error/typed';\n\nconst LevelUnsupportedError = TypedError({\n  message: '{name} - не поддерживаемый уровень логирования (level={level})',\n  type   : `micro.modules.health-check.level.unsupported`,\n  code   : 500,\n  level  : null\n});\n\nexport default request => {\n  const { level } = request;\n  if (!Object.keys(request.log.LEVELS).includes(level)) {\n    return Promise.resolve(LevelUnsupportedError({ level }));\n  }\n\n  return Promise.resolve(request.log.level = level);\n};"]}