{"version":3,"sources":["../../../src/libs/act/index.js"],"names":["actExec","micro","raw","callback","queue","case","next","msg","request","actionId","actionManager","find","params","done","err","result","api","transport","action","actions","_handleError","handleError","logger","info","payload","code","message","JSON","stringify","then","handleSuccess","error"],"mappings":";;;;;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AAEA;AACe,SAASA,OAAT,CAAiBC,KAAjB,EAAwBC,GAAxB,EAAkD;AAAA,MAArBC,SAAqB,uEAAV,YAAM,CAAE,CAAE;;AAC/DF,QAAMG,KAAN,CAAY;AACVC,+BADU;AAEVF,cAAU,kBAACG,IAAD,EAAU;AAClB,UAAMC,MAAM,uBAAQL,GAAR,CAAZ;AADkB,UAEVM,OAFU,GAEED,GAFF,CAEVC,OAFU;;;AAIlB,UAAI,CAACA,QAAQC,QAAb,EAAuB;AACrBD,gBAAQC,QAAR,GAAmBR,MAAMS,aAAN,CAAoBC,IAApB,CAAyBJ,IAAIK,MAA7B,CAAnB;AACD;;AAEDC,WAAKZ,KAAL,EAAYM,GAAZ,EAAiB,UAACO,GAAD,EAAMC,MAAN,EAAiB;AAChC,mCAAYd,MAAMe,GAAlB,EAAuBb,UAASW,GAAT,EAAcC,MAAd,CAAvB;AACAT,aAAKQ,GAAL;AACD,OAHD;AAID;AAdS,GAAZ;;AAiBA,SAAOb,KAAP;AACD,C;AAAA;;AAED,SAASY,IAAT,CAAcZ,KAAd,EAAqBM,GAArB,EAA0BJ,QAA1B,EAAoC;AAAA,MAC1Bc,SAD0B,GACKV,GADL,CAC1BU,SAD0B;AAAA,MACfT,OADe,GACKD,GADL,CACfC,OADe;AAAA,MACNI,MADM,GACKL,GADL,CACNK,MADM;;AAElC,MAAMH,WAAWD,QAAQC,QAAR,IAAoBR,MAAMS,aAAN,CAAoBC,IAApB,CAAyBC,MAAzB,CAArC;AACA,MAAMM,SAASjB,MAAMkB,OAAN,CAAeV,QAAf,CAAf;AACA,MAAMW,eAAeC,YAAY,EAAEpB,YAAF,EAASO,gBAAT,EAAkBL,kBAAlB,EAAZ,CAArB;;AAEAF,QAAMqB,MAAN,CAAaC,IAAb,cAAuBf,OAAvB,IAAgCU,4BAAhC,EAAmDM,SAASZ,MAA5D;;AAEA,MAAI,CAACM,MAAL,EAAa;AACXE,iBAAa;AACXK,YAAU,2BADC;AAEXC,+DAAsBC,KAAKC,SAAL,CAAehB,MAAf,CAAtB;AAFW,KAAb;AAIA,WAAOX,KAAP;AACD;;AAED,6BAAY,kCAAmBA,MAAMe,GAAzB,EAA8BR,OAA9B,CAAZ,EAAoDU,OAAOf,QAAP,CAAgBS,MAAhB,CAApD,EACGiB,IADH,CACQC,cAAc,EAAE7B,YAAF,EAASO,gBAAT,EAAkBL,kBAAlB,EAAd,CADR,EACqDiB,YADrD;AAED;;AAED,SAASU,aAAT,OAAsD;AAAA,MAA5B7B,KAA4B,QAA5BA,KAA4B;AAAA,MAArBO,OAAqB,QAArBA,OAAqB;AAAA,MAAZL,QAAY,QAAZA,QAAY;;AACpD,SAAO,kBAAU;AACf,kCAAeK,OAAf;AACA,+BAAYP,MAAMe,GAAlB,EAAuBb,SAAS,IAAT,EAAeY,MAAf,CAAvB;AACAd,UAAMqB,MAAN,CAAaC,IAAb,cAAuBf,OAAvB,IAAgCU,6BAAhC,EAAoDM,SAAST,MAA7D;AACD,GAJD;AAKD;;AAED,SAASM,WAAT,QAAoD;AAAA,MAA5BpB,KAA4B,SAA5BA,KAA4B;AAAA,MAArBO,OAAqB,SAArBA,OAAqB;AAAA,MAAZL,QAAY,SAAZA,QAAY;;AAClD,SAAO,iBAAS;AACd,kCAAeK,OAAf;AACA,+BAAYP,MAAMe,GAAlB,EAAuBb,SAAS4B,KAAT,CAAvB;AACA9B,UAAMqB,MAAN,CAAaS,KAAb,cAAwBvB,OAAxB,IAAiCU,6BAAjC,EAAqDa,YAArD;AACD,GAJD;AAKD","file":"index.js","sourcesContent":["import provideCall from './../../utils/provide-call';\nimport makeMsg from './../../utils/make-msg';\nimport actProxyClientExec from './act-proxy-client-exec';\nimport updateDuration from './../../utils/update-duration';\nimport {QUEUE_CASE, ACTION_IN, ACTION_OUT, ACTION_ERR} from './constants';\n\n// Добавляет маршрут\nexport default function actExec(micro, raw, callback = () => {}) {\n  micro.queue({\n    case: QUEUE_CASE,\n    callback: (next) => {\n      const msg = makeMsg(raw);\n      const { request } = msg;\n  \n      if (!request.actionId) {\n        request.actionId = micro.actionManager.find(msg.params);\n      }\n  \n      done(micro, msg, (err, result) => {\n        provideCall(micro.api, callback(err, result));\n        next(err);\n      });\n    }\n  });\n\n  return micro;\n};\n\nfunction done(micro, msg, callback) {\n  const { transport, request, params } = msg;\n  const actionId = request.actionId || micro.actionManager.find(params);\n  const action = micro.actions[ actionId ];\n  const _handleError = handleError({ micro, request, callback });\n\n  micro.logger.info({ ...request, action: ACTION_IN, payload: params });\n\n  if (!action) {\n    _handleError({\n      code    : 'error.act/route.not.found',\n      message : `Маршрут ${ JSON.stringify(params) } не найден`\n    });\n    return micro;\n  }\n\n  provideCall(actProxyClientExec(micro.api, request), action.callback(params))\n    .then(handleSuccess({ micro, request, callback }), _handleError);\n}\n\nfunction handleSuccess ({ micro, request, callback }) {\n  return result => {\n    updateDuration(request);\n    provideCall(micro.api, callback(null, result));\n    micro.logger.info({ ...request, action: ACTION_OUT, payload: result });\n  };\n}\n\nfunction handleError ({ micro, request, callback }) {\n  return error => {\n    updateDuration(request);\n    provideCall(micro.api, callback(error));\n    micro.logger.error({ ...request, action: ACTION_ERR, error });\n  };\n}"]}