{"version":3,"sources":["../../src/libs/plugin.js"],"names":["micro","options","name","plugin","errors","some","property","error","TypeError","code","details","die","pluginGetter","pluginSetter","store","plugins","pluginId","genid","info","id"],"mappings":";;;;;;AAAA;;AACA;;;;AACA;;;;;;AAEA;kBACe,UAACA,KAAD,EAAyB;AAAA,MAAjBC,OAAiB,uEAAP,EAAO;AAAA,MAC9BC,IAD8B,GACbD,OADa,CAC9BC,IAD8B;AAAA,MACxBC,MADwB,GACbF,OADa,CACxBE,MADwB;;;AAGtC,MAAID,sCAAJ,EAAiC;AAC/B,QAAME,SAAS,CAAE,MAAF,CAAf;;AAEAA,WAAOC,IAAP,CAAY,oBAAY;AACtB,UAAI,CAACJ,QAASK,QAAT,CAAL,EAA0B;AACxB,YAAMC,QAAQ,IAAIC,SAAJ,mLAAmDF,QAAnD,0EAAd;AACAC,cAAME,IAAN,8BAAuCH,QAAvC;AACAC,cAAMG,OAAN,GAAgB,EAAET,gBAAF,EAAhB;AACAD,cAAMW,GAAN,CAAUJ,KAAV;AACA,eAAO,IAAP;AACD;;AAED,aAAO,KAAP;AACD,KAVD;AAWD;;AAED,SAAO,CAACJ,MAAD,GACHS,aAAaZ,KAAb,EAAoBE,IAApB,CADG,GAEHW,aAAab,KAAb,EAAoBE,IAApB,EAA0BC,MAA1B,CAFJ;AAGD,C;;AAED,SAASS,YAAT,CAAsBE,KAAtB,EAA6BZ,IAA7B,EAAmC;AACjC,SAAO,CAACY,MAAMC,OAAN,CAAeb,IAAf,KAAyB,EAA1B,EAA8BC,MAArC;AACD;;AAED,SAASU,YAAT,CAAsBb,KAAtB,EAA6BE,IAA7B,EAAmCC,MAAnC,EAA2C;AACzC,MAAMa,WAAWhB,MAAMiB,KAAN,EAAjB;;AAEA,MAAIjB,MAAMG,MAAN,+BAAJ,EAAsC;AACpCH,UAAMG,MAAN,gCAAiCe,IAAjC,qHAA+DhB,IAA/D,QAAyE,EAAEiB,IAAIH,QAAN,EAAzE;AACD;;AAEDb,WAAS,2BAAY,CAAEH,KAAF,EAASE,IAAT,EAAec,QAAf,CAAZ,EAAuCb,MAAvC,CAAT;;AAEA,MAAID,sCAAJ,EAAiC;AAC/BC,aAAS,2BAAYA,MAAZ,CAAT;AACD;;AAEDH,QAAMe,OAAN,CAAeb,IAAf,IAAwB;AACtBiB,QAAMH,QADgB;AAEtBd,UAAMc,QAFgB;AAGtBb;AAHsB,GAAxB;;AAMA,SAAOH,KAAP;AACD","file":"plugin.js","sourcesContent":["import {PLUGIN_LOGGER_NAME} from './../constants';\nimport ProxyLogger from './../utils/proxy-logger';\nimport provideCall from './../utils/provide-call';\n\n// Регистрирует плагин\nexport default (micro, options = {}) => {\n  const { name, plugin } = options;\n\n  if (name !== PLUGIN_LOGGER_NAME) {\n    const errors = [ 'name' ];\n\n    errors.some(property => {\n      if (!options[ property ]) {\n        const error = new TypeError(`Для добавления плагина свойство \"${ property }\" обязательно`);\n        error.code = `error.plugin.property.${ property }.is.required`;\n        error.details = { options };\n        micro.die(error);\n        return true;\n      }\n\n      return false;\n    });\n  }\n\n  return !plugin\n    ? pluginGetter(micro, name)\n    : pluginSetter(micro, name, plugin);\n};\n\nfunction pluginGetter(store, name) {\n  return (store.plugins[ name ] || {}).plugin;\n}\n\nfunction pluginSetter(micro, name, plugin) {\n  const pluginId = micro.genid();\n\n  if (micro.plugin(PLUGIN_LOGGER_NAME)) {\n    micro.plugin(PLUGIN_LOGGER_NAME).info(`Регистрация плагина \"${ name }\"`, { id: pluginId });\n  }\n\n  plugin = provideCall([ micro, name, pluginId ], plugin);\n\n  if (name === PLUGIN_LOGGER_NAME) {\n    plugin = ProxyLogger(plugin);\n  }\n\n  micro.plugins[ name ] = {\n    id  : pluginId,\n    name: pluginId,\n    plugin\n  };\n\n  return micro;\n}"]}