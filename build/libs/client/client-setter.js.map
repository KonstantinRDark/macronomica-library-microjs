{"version":3,"sources":["../../../src/libs/client/client-setter.js"],"names":["clientSetter","micro","transportOptions","name","type","pluginTransport","plugin","error","Error","join","code","details","options","die","clientId","transport","client","id","api","exec","clients","logger","info","payload"],"mappings":";;;;;;;;kBASwBA,Y;;AATxB;;;;AACA;;;;AACA;;;;AAEA;;;;;AAKe,SAASA,YAAT,CAAsBC,KAAtB,EAA6BC,gBAA7B,EAA+C;AAAA,MACpDC,IADoD,GACrCD,gBADqC,CACpDC,IADoD;AAAA,MAC9CC,IAD8C,GACrCF,gBADqC,CAC9CE,IAD8C;;AAE5D,MAAMC,kBAAkBJ,MAAMK,MAAN,CAAaF,IAAb,CAAxB;;AAEA,MAAI,CAACC,eAAL,EAAsB;AACpB,QAAME,QAAQ,IAAIC,KAAJ,CAAU,yGACCJ,IADD,oSAEkB,8BAAmBK,IAAnB,CAAwB,MAAxB,CAFlB,UAGtBA,IAHsB,CAGjB,IAHiB,CAAV,CAAd;AAIAF,UAAMG,IAAN;AACAH,UAAMI,OAAN,GAAgB,EAAEC,SAASV,gBAAX,EAAhB;AACA,WAAOD,MAAMY,GAAN,CAAUN,KAAV,CAAP;AACD;;AAED,MAAMO,WAAW,sBAAjB;AACA,MAAMC,YAAYV,gBAAgBW,MAAhB,CAAuBd,gBAAvB,CAAlB;AACA,MAAMc,SAAS;AACbC,QAAIH,QADS;AAEbX,cAFa;AAGbY;AAHa,GAAf;AAKA,MAAMG,MAAM;AACVC,UAAM,0BAAWlB,KAAX,EAAkBe,MAAlB;AADI,GAAZ;;AAIAf,QAAMmB,OAAN,CAAejB,IAAf,iBAA6Ba,MAA7B,IAAqCE,QAArC;;AAEAjB,QAAMoB,MAAN,CAAaC,IAAb,qHAA2CnB,IAA3C,QAAqD,EAAEc,IAAIH,QAAN,EAAgBS,SAAS,EAAErB,kCAAF,EAAzB,EAArD;;AAEA,SAAOD,KAAP;AACD","file":"client-setter.js","sourcesContent":["import clientExec from './client-exec';\nimport genid from './../../utils/genid';\nimport {TRANSPORT_SUPPORTS} from './constants';\n\n/**\n * 1) Регистрируем клиента\n * 2) Создаем транспорт для общения с клиентом\n * 2) Создаем транспорт для общения с клиентом\n */\nexport default function clientSetter(micro, transportOptions) {\n  const { name, type } = transportOptions;\n  const pluginTransport = micro.plugin(type);\n\n  if (!pluginTransport) {\n    const error = new Error([\n      `Транспорт клиента \"${ type }\" не поддерживается`,\n      `Поддерживаемые типы транспортов: [ \"${ TRANSPORT_SUPPORTS.join('\", \"') }\" ]`\n    ].join('. '));\n    error.code = `error.client.setter/type.not.available`;\n    error.details = { options: transportOptions };\n    return micro.die(error);\n  }\n\n  const clientId = genid();\n  const transport = pluginTransport.client(transportOptions);\n  const client = {\n    id: clientId,\n    name,\n    transport,\n  };\n  const api = {\n    exec: clientExec(micro, client)\n  };\n\n  micro.clients[ name ] = { ...client, api };\n\n  micro.logger.info(`Регистрация клиента \"${ name }\"`, { id: clientId, payload: { transportOptions } });\n\n  return micro;\n}"]}