{"version":3,"sources":["../../../src/libs/client/client-exec.js"],"names":["clientExec","micro","client","pin","request","Promise","resolve","reject","queue","case","callback","next","msg","id","actionId","done","error","result","transport","params","options","headers","logger","info","action","payload","then","handleSuccess","handleError"],"mappings":";;;;;;;;kBAewBA,U;;AAfxB;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AAEA;;;;;;;;AAQe,SAASA,UAAT,CAAoBC,KAApB,EAA2BC,MAA3B,EAAmC;AAChD,SAAO,UAACC,GAAD;AAAA,mFAAyB,EAAzB;AAAA,4BAAQC,OAAR;AAAA,QAAQA,OAAR,gCAAkB,EAAlB;;AAAA,WAAgC,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtEN,YAAMO,KAAN,CAAY;AACVC,mCADU;AAEVC,kBAAU,kBAACC,IAAD,EAAU;AAClB,cAAMC,MAAM,oCACN,sBAAST,GAAT,IAAgB,sBAAOA,GAAP,CAAhB,GAA8BA,GADxB;AAEVC,qBAAS,iCAAkB,EAAES,IAAIT,QAAQS,EAAd,EAAkBC,UAAUZ,OAAOW,EAAnC,EAAlB;AAFC,aAAZ;AAIA,iBAAOE,KAAKd,KAAL,EAAYC,MAAZ,EAAoBU,GAApB,EAAyB,UAACI,KAAD,EAAQC,MAAR,EAAmB;AACjD,gBAAID,KAAJ,EAAW;AACTT,qBAAOS,KAAP;AACD,aAFD,MAEO;AACLV,sBAAQW,MAAR;AACD;;AAEDN,iBAAKK,KAAL,EAAYC,MAAZ;AACD,WARM,CAAP;AASD;AAhBS,OAAZ;AAkBD,KAnBsC,CAAhC;AAAA,GAAP;AAoBD;;AAED,SAASF,IAAT,CAAcd,KAAd,EAAqBC,MAArB,EAA6B;AAC3B,SAAO,UAACU,GAAD,EAAMF,QAAN,EAAmB;AAAA,QAChBQ,SADgB,GACeN,GADf,CAChBM,SADgB;AAAA,QACLd,OADK,GACeQ,GADf,CACLR,OADK;AAAA,QACIe,MADJ,GACeP,GADf,CACIO,MADJ;AAExB;;AACA,QAAMC,UAAU;AACdD,oBADc;AAEdf,sBAFc;AAGdiB,eAAS,EAAE,iDAAF;AAHK,KAAhB;;AAMA;AACApB,UAAMqB,MAAN,CAAaC,IAAb,cAAuBnB,OAAvB,IAAgCoB,4BAAhC,EAAmDC,SAASN,MAA5D;;AAEA;AACAjB,WAAOgB,SAAP,CAAiBE,OAAjB,EACGM,IADH,CAEIC,cAAc1B,KAAd,EAAqBG,OAArB,EAA8BM,QAA9B,CAFJ,EAGIkB,YAAY3B,KAAZ,EAAmBG,OAAnB,EAA4BM,QAA5B,CAHJ;AAKD,GAlBD;AAmBD;;AAED;;;;;;;;AAQA,SAASiB,aAAT,CAAuB1B,KAAvB,EAA8BG,OAA9B,EAAuCM,QAAvC,EAAiD;AAC/C,SAAO,UAACe,OAAD,EAAa;AAClB,kCAAerB,OAAf;AACAM,aAAS,IAAT,EAAee,OAAf;AACAxB,UAAMqB,MAAN,CAAaC,IAAb,cAAuBnB,OAAvB,IAAgCoB,6BAAhC,EAAoDC,gBAApD;AACD,GAJD;AAKD;;AAED;;;;;;;;AAQA,SAASG,WAAT,CAAqB3B,KAArB,EAA4BG,OAA5B,EAAqCM,QAArC,EAA+C;AAC7C,SAAO,iBAAS;AACd,kCAAeN,OAAf;AACAM,aAASM,KAAT;AACAf,UAAMqB,MAAN,CAAaN,KAAb,cAAwBZ,OAAxB,IAAiCoB,6BAAjC,EAAqDR,YAArD;AACD,GAJD;AAKD","file":"client-exec.js","sourcesContent":["import isString from 'lodash.isstring';\nimport jsonic from 'jsonic';\nimport makeRequestObject from './../../utils/make-request-object';\nimport makeMsg from './../../utils/make-msg';\nimport updateDuration from './../../utils/update-duration';\nimport {TRANSPORT_CONTENT_TYPE, QUEUE_CASE, ACTION_IN, ACTION_OUT, ACTION_ERR} from './constants';\n\n/**\n * Делаем запрос через транспорт клиента\n * Разбираем запрос\n *\n * @param micro\n * @param client\n * @returns {function(): Promise}\n */\nexport default function clientExec(micro, client) {\n  return (pin, { request = {} } = {}) => new Promise((resolve, reject) => {\n    micro.queue({\n      case    : QUEUE_CASE,\n      callback: (next) => {\n        const msg = makeMsg({\n          ...(isString(pin) ? jsonic(pin) : pin),\n          request: makeRequestObject({ id: request.id, actionId: client.id })\n        });\n        return done(micro, client)(msg, (error, result) => {\n          if (error) {\n            reject(error);\n          } else {\n            resolve(result);\n          }\n        \n          next(error, result);\n        });\n      }\n    });\n  });\n}\n\nfunction done(micro, client) {\n  return (msg, callback) => {\n    const { transport, request, params } = msg;\n    // Параметры для обращения к клиенту через транспорт\n    const options = {\n      params,\n      request,\n      headers: { 'Content-Type': TRANSPORT_CONTENT_TYPE }\n    };\n\n    // Сообщим что запрос начался\n    micro.logger.info({ ...request, action: ACTION_IN, payload: params });\n\n    // Отправим запрос клиенту и подпишимся на результаты\n    client.transport(options)\n      .then(\n        handleSuccess(micro, request, callback),\n        handleError(micro, request, callback)\n      );\n  };\n}\n\n/**\n * Обработчик ответа от клиента в случае успеха\n *\n * @param micro\n * @param request\n * @param callback\n * @returns {function(*=)}\n */\nfunction handleSuccess(micro, request, callback) {\n  return (payload) => {\n    updateDuration(request);\n    callback(null, payload);\n    micro.logger.info({ ...request, action: ACTION_OUT, payload });\n  };\n}\n\n/**\n * Обработчик ответа от клиента в случае ошибки\n *\n * @param micro\n * @param request\n * @param callback\n * @returns {function(*=)}\n */\nfunction handleError(micro, request, callback) {\n  return error => {\n    updateDuration(request);\n    callback(error);\n    micro.logger.error({ ...request, action: ACTION_ERR, error });\n  };\n}"]}