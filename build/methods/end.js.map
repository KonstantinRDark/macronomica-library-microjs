{"version":3,"sources":["../../src/methods/end.js"],"names":["run","microjs","endSubscribers","subscribers","end","dfd","promise","cb","then","resolve","catch","reject"],"mappings":";;;;;kBAQwBA,G;;AARxB;;;;AACA;;;;;;AAEA;;;;;AAKe,SAASA,GAAT,CAAaC,OAAb,QAAgE;AAAA,MAApBC,cAAoB,QAAxCC,WAAwC,CAAzBC,GAAyB;;AAC7E,MAAIC,YAAJ;;AAEA,SAAO,cAAM;AACX,QAAIA,GAAJ,EAAS;AACP,aAAOA,IAAIC,OAAX;AACD;;AAEDD,UAAM,qBAAME,EAAN,CAAN;;AAEA,uCAAoBN,OAApB,EAA6BC,cAA7B,EACGM,IADH,CACQH,IAAII,OADZ,EAEGC,KAFH,CAESL,IAAIM,MAFb;;AAIA,WAAON,IAAIC,OAAX;AACD,GAZD;AAaD","file":"end.js","sourcesContent":["import defer from './../utils/defer';\nimport runCloseSubscribers from './../utils/run-close-subscribers';\n\n/**\n * @param {object} microjs                // Экземпляр библиотеки\n * @param {function[]} endSubscribers     // Список подписчиков на этап закрытия\n * @returns {function(?function):Promise}\n */\nexport default function run(microjs, { subscribers: { end: endSubscribers } }) {\n  let dfd;\n\n  return cb => {\n    if (dfd) {\n      return dfd.promise;\n    }\n\n    dfd = defer(cb);\n\n    runCloseSubscribers(microjs, endSubscribers)\n      .then(dfd.resolve)\n      .catch(dfd.reject);\n\n    return dfd.promise;\n  };\n}"]}