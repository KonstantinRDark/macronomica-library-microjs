{"version":3,"sources":["../../src/methods/log.js"],"names":["LEVEL_ALL","LEVEL_OFF","LEVEL_INFO","LEVEL_TRACE","LEVEL_DEBUG","LEVEL_WARN","LEVEL_ERROR","LEVEL_FATAL","LEVELS","app","level","logger","log","usePluginLogger","on","process","error","message","payload","emit","args","push","JSON","stringify","console","warn"],"mappings":";;;;;AACO,MAAMA,gCAAY,KAAlB;AACA,MAAMC,gCAAY,KAAlB;AACA,MAAMC,kCAAa,MAAnB;AACA,MAAMC,oCAAc,OAApB;AACA,MAAMC,oCAAc,OAApB;AACA,MAAMC,kCAAa,MAAnB;AACA,MAAMC,oCAAc,OAApB;AACA,MAAMC,oCAAc,OAApB;AACP;;;;;AAKO,MAAMC,0BAAS;AACpB,GAAER,SAAF,GAAe,CADK;;AAGpB,GAAEO,WAAF,GAAiB,EAHG;AAIpB,GAAED,WAAF,GAAiB,EAJG;AAKpB,GAAED,UAAF,GAAiB,EALG;AAMpB,GAAEH,UAAF,GAAiB,EANG;AAOpB,GAAEC,WAAF,GAAiB,EAPG;AAQpB,GAAEC,WAAF,GAAiB,EARG;;AAUpB,GAAEH,SAAF,GAAe;AAVK,CAAf;;AAaP;;;;;;kBAKe,UAACQ,GAAD,EAAuC;AAAA,iFAAP,EAAO;AAAA,wBAA/BC,KAA+B;;AAAA,MAA/BA,KAA+B,8BAAvBN,WAAuB;;AACpD;;;;;;;;;;;;;;;AAeA;;;AAGA,QAAMO,SAAS;AACb;;;;AAIAD,SALa;AAMb;;;;AAIAF,UAVa;AAWb;;;;;;AAMA,KAAEJ,WAAF,GAAiBQ,IAAIR,WAAJ,CAjBJ;AAkBb;;;;;;AAMA,KAAED,WAAF,GAAiBS,IAAIT,WAAJ,CAxBJ;AAyBb;;;;;;AAMA,KAAED,UAAF,GAAiBU,IAAIV,UAAJ,CA/BJ;AAgCb;;;;;;AAMA,KAAEG,UAAF,GAAiBO,IAAIP,UAAJ,CAtCJ;AAuCb;;;;;;AAMA,KAAEC,WAAF,GAAiBM,IAAIN,WAAJ,CA7CJ;AA8Cb;;;;;;AAMA,KAAEC,WAAF,GAAiBK,IAAIL,WAAJ;AApDJ,GAAf;AAsDA,MAAIM,eAAJ;;AAEAJ,MAAIK,EAAJ,CAAO,mBAAP,EAA4B,MAAMD,kBAAkB,IAApD;AACAJ,MAAIK,EAAJ,CAAO,qBAAP,EAA8B,MAAMD,kBAAkB,KAAtD;;AAEAE,UAAQD,EAAR,CAAW,mBAAX,EAAgCH,OAAOK,KAAvC;;AAEA,SAAOL,MAAP;;AAEA;;;;AAIA,WAASC,GAAT,CAAaF,KAAb,EAAoB;AAClB,WAAO,CAACO,OAAD,EAAUC,OAAV,KAAsB;AAC3B,UAAIV,OAAQG,OAAOD,KAAf,IAAyBF,OAAQE,KAAR,CAA7B,EAA8C;AAC5C,eAAOC,MAAP;AACD;;AAED,UAAIE,eAAJ,EAAqB;AACnBJ,YAAIU,IAAJ,CAAS,KAAT,EAAgB,EAAET,KAAF,EAASO,OAAT,EAAkBC,OAAlB,EAAhB;AACAT,YAAIU,IAAJ,CAAU,QAAOT,KAAO,GAAxB,EAA2B,EAAEA,KAAF,EAASO,OAAT,EAAkBC,OAAlB,EAA3B;AACD,OAHD,MAGO;AACL,cAAME,OAAO,CAAG,IAAGV,KAAO,KAAb,EAAkBO,OAAlB,CAAb;;AAEA,YAAI,CAAC,CAACC,OAAN,EAAe;AACbE,eAAKC,IAAL,CAAUC,KAAKC,SAAL,CAAeL,OAAf,EAAwB,EAAxB,EAA4B,CAA5B,CAAV;AACD;;AAED,gBAAQR,KAAR;AACE,eAAKJ,WAAL;AACA,eAAKC,WAAL;AACEiB,oBAAQR,KAAR,CAAc,GAAGI,IAAjB;AACA;AACF,eAAKf,UAAL;AACEmB,oBAAQC,IAAR,CAAa,GAAGL,IAAhB;AACA;AACF;AACEI,oBAAQZ,GAAR,CAAY,GAAGQ,IAAf;AATJ;AAWD;;AAED,aAAOT,MAAP;AACD,KA7BD;AA8BD;AACF,C","file":"log.js","sourcesContent":["\nexport const LEVEL_ALL = 'all';\nexport const LEVEL_OFF = 'off';\nexport const LEVEL_INFO = 'info';\nexport const LEVEL_TRACE = 'trace';\nexport const LEVEL_DEBUG = 'debug';\nexport const LEVEL_WARN = 'warn';\nexport const LEVEL_ERROR = 'error';\nexport const LEVEL_FATAL = 'fatal';\n/**\n * @name LEVELS\n * @type {Object<string, number>}\n * @enum {number}\n */\nexport const LEVELS = {\n  [ LEVEL_ALL ]: 0,\n\n  [ LEVEL_FATAL ]: 10,\n  [ LEVEL_ERROR ]: 20,\n  [ LEVEL_WARN  ]: 30,\n  [ LEVEL_INFO  ]: 40,\n  [ LEVEL_TRACE ]: 50,\n  [ LEVEL_DEBUG ]: 60,\n\n  [ LEVEL_OFF ]: 100\n};\n\n/**\n * @param {app} app\n * @param { string } [level]\n * @returns {object}\n */\nexport default (app, { level = LEVEL_DEBUG } = {}) => {\n  /**\n   * Levels:\n   *\n   * ALL    Все уровни\n   * OFF    Отключить ведение журнала\n   *\n   * INFO   Информационные сообщения\n   * TRACE  Информационные сообщения, с дополнительной информацией\n   * DEBUG  Информационные события, которые наиболее полезны для отладки приложения.\n   *\n   * WARN   Предупреждения о потенциально опасных ситуациях\n   * ERROR  Ошибка, но которая позволяет приложению продолжать работать\n   * FATAL  Ошибка, которая приводит завершению приложения\n   */\n\n  /**\n   * @namespace app.log\n   */\n  const logger = {\n    /**\n     * @memberof app.log\n     * @type {string}\n     */\n    level,\n    /**\n     * @memberof app.log\n     * @type {Object<!string, !number>}\n     */\n    LEVELS,\n    /**\n     * @memberof app.log\n     * @name debug\n     * @param {string} message\n     * @param {*} [payload]\n     */\n    [ LEVEL_DEBUG ]: log(LEVEL_DEBUG),\n    /**\n     * @memberof app.log\n     * @name trace\n     * @param {string} message\n     * @param {*} [payload]\n     */\n    [ LEVEL_TRACE ]: log(LEVEL_TRACE),\n    /**\n     * @memberof app.log\n     * @name info\n     * @param {string} message\n     * @param {*} [payload]\n     */\n    [ LEVEL_INFO ] : log(LEVEL_INFO),\n    /**\n     * @memberof app.log\n     * @name warn\n     * @param {string} message\n     * @param {*} [payload]\n     */\n    [ LEVEL_WARN ] : log(LEVEL_WARN),\n    /**\n     * @memberof app.log\n     * @name error\n     * @param {string} message\n     * @param {*} [payload]\n     */\n    [ LEVEL_ERROR ]: log(LEVEL_ERROR),\n    /**\n     * @memberof app.log\n     * @name fatal\n     * @param {string} message\n     * @param {*} [payload]\n     */\n    [ LEVEL_FATAL ]: log(LEVEL_FATAL)\n  };\n  let usePluginLogger;\n\n  app.on('plugin.logger.use', () => usePluginLogger = true);\n  app.on('plugin.logger.unuse', () => usePluginLogger = false);\n\n  process.on('uncaughtException', logger.error);\n\n  return logger;\n\n  /**\n   * @param {string} level\n   * @returns {function(string, payload)}\n   */\n  function log(level) {\n    return (message, payload) => {\n      if (LEVELS[ logger.level ] < LEVELS[ level ]) {\n        return logger;\n      }\n\n      if (usePluginLogger) {\n        app.emit('log', { level, message, payload });\n        app.emit(`log.${ level }`, { level, message, payload });\n      } else {\n        const args = [ `${ level }\\t`, message ];\n\n        if (!!payload) {\n          args.push(JSON.stringify(payload, '', 4));\n        }\n\n        switch (level) {\n          case LEVEL_ERROR:\n          case LEVEL_FATAL:\n            console.error(...args);\n            break;\n          case LEVEL_WARN:\n            console.warn(...args);\n            break;\n          default:\n            console.log(...args);\n        }\n      }\n\n      return logger;\n    };\n  }\n}"]}