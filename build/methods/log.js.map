{"version":3,"sources":["../../src/methods/log.js"],"names":["LEVEL_ALL","LEVEL_OFF","LEVEL_INFO","LEVEL_TRACE","LEVEL_DEBUG","LEVEL_WARN","LEVEL_ERROR","LEVEL_FATAL","LEVELS","app","level","logger","log","message","payload","act","cmd","catch"],"mappings":";;;;;;;;;;AACO,IAAMA,gCAAY,KAAlB;AACA,IAAMC,gCAAY,KAAlB;AACA,IAAMC,kCAAa,MAAnB;AACA,IAAMC,oCAAc,OAApB;AACA,IAAMC,oCAAc,OAApB;AACA,IAAMC,kCAAa,MAAnB;AACA,IAAMC,oCAAc,OAApB;AACA,IAAMC,oCAAc,OAApB;AACP;;;;;AAKO,IAAMC,kEACTR,SADS,EACI,CADJ,4BAGTE,UAHS,EAGM,EAHN,4BAITC,WAJS,EAIM,EAJN,4BAKTC,WALS,EAKM,EALN,4BAMTC,UANS,EAMM,EANN,4BAOTC,WAPS,EAOM,EAPN,4BAQTC,WARS,EAQM,EARN,4BAUTN,SAVS,EAUI,GAVJ,WAAN;;AAaP;;;;;;kBAKe,UAACQ,GAAD,EAAuC;AAAA;;AAAA,iFAAP,EAAO;AAAA,wBAA/BC,KAA+B;AAAA,MAA/BA,KAA+B,8BAAvBN,WAAuB;;AACpD;;;;;;;;;;;;;;;AAeA;;;AAGA,MAAMO;AACJ;;;;AAIAD,gBALI;AAMJ;;;;AAIAF;AAVI,8BAiBFJ,WAjBE,EAiBaQ,IAAIR,WAAJ,CAjBb,4BAwBFD,WAxBE,EAwBaS,IAAIT,WAAJ,CAxBb,4BA+BFD,UA/BE,EA+BaU,IAAIV,UAAJ,CA/Bb,4BAsCFG,UAtCE,EAsCaO,IAAIP,UAAJ,CAtCb,4BA6CFC,WA7CE,EA6CaM,IAAIN,WAAJ,CA7Cb,4BAoDFC,WApDE,EAoDaK,IAAIL,WAAJ,CApDb,WAAN;;AAuDA,SAAOI,MAAP;;AAEA;;;;AAIA,WAASC,GAAT,CAAaF,KAAb,EAAoB;AAClB,WAAO,UAACG,OAAD,EAAyB;AAAA,wCAAZC,OAAY;AAAZA,eAAY;AAAA;;AAC9B,UAAIN,OAAQG,OAAOD,KAAf,IAAyBF,OAAQE,KAAR,CAA7B,EAA8C;AAC5C,eAAOC,MAAP;AACD;;AAEDF,UACGM,GADH,CACO,EAAEC,KAAK,QAAP,EAAiBN,YAAjB,EAAwBG,gBAAxB,EAAiCC,gBAAjC,EADP,EAEGG,KAFH,CAES;AAAA;;AAAA,eAAU,qBAAQL,GAAR,kBAAgBF,KAAhB,UAA4BG,OAA5B,SAA2CC,OAA3C,EAAV;AAAA,OAFT;;AAIA,aAAOH,MAAP;AACD,KAVD;AAWD;AACF,C","file":"log.js","sourcesContent":["\nexport const LEVEL_ALL = 'all';\nexport const LEVEL_OFF = 'off';\nexport const LEVEL_INFO = 'info';\nexport const LEVEL_TRACE = 'trace';\nexport const LEVEL_DEBUG = 'debug';\nexport const LEVEL_WARN = 'warn';\nexport const LEVEL_ERROR = 'error';\nexport const LEVEL_FATAL = 'fatal';\n/**\n * @name LEVELS\n * @type {Object<string, number>}\n * @enum {number}\n */\nexport const LEVELS = {\n  [ LEVEL_ALL ]: 0,\n\n  [ LEVEL_INFO  ]: 10,\n  [ LEVEL_TRACE ]: 20,\n  [ LEVEL_DEBUG ]: 30,\n  [ LEVEL_WARN  ]: 40,\n  [ LEVEL_ERROR ]: 50,\n  [ LEVEL_FATAL ]: 60,\n\n  [ LEVEL_OFF ]: 100\n};\n\n/**\n * @param {app} app\n * @param { string } [level]\n * @returns {object}\n */\nexport default (app, { level = LEVEL_DEBUG } = {}) => {\n  /**\n   * Levels:\n   *\n   * ALL    Все уровни\n   * OFF    Отключить ведение журнала\n   *\n   * INFO   Информационные сообщения\n   * TRACE  Информационные сообщения, с дополнительной информацией\n   * DEBUG  Информационные события, которые наиболее полезны для отладки приложения.\n   *\n   * WARN   Предупреждения о потенциально опасных ситуациях\n   * ERROR  Ошибка, но которая позволяет приложению продолжать работать\n   * FATAL  Ошибка, которая приводит завершению приложения\n   */\n\n  /**\n   * @namespace app.log\n   */\n  const logger = {\n    /**\n     * @memberof app.log\n     * @type {string}\n     */\n    level,\n    /**\n     * @memberof app.log\n     * @type {Object<!string, !number>}\n     */\n    LEVELS,\n    /**\n     * @memberof app.log\n     * @name debug\n     * @param {string} message\n     * @param {...*} [payload]\n     */\n    [ LEVEL_DEBUG ]: log(LEVEL_DEBUG),\n    /**\n     * @memberof app.log\n     * @name trace\n     * @param {string} message\n     * @param {...*} [payload]\n     */\n    [ LEVEL_TRACE ]: log(LEVEL_TRACE),\n    /**\n     * @memberof app.log\n     * @name info\n     * @param {string} message\n     * @param {...*} [payload]\n     */\n    [ LEVEL_INFO ] : log(LEVEL_INFO),\n    /**\n     * @memberof app.log\n     * @name warn\n     * @param {string} message\n     * @param {...*} [payload]\n     */\n    [ LEVEL_WARN ] : log(LEVEL_WARN),\n    /**\n     * @memberof app.log\n     * @name error\n     * @param {string} message\n     * @param {...*} [payload]\n     */\n    [ LEVEL_ERROR ]: log(LEVEL_ERROR),\n    /**\n     * @memberof app.log\n     * @name fatal\n     * @param {string} message\n     * @param {...*} [payload]\n     */\n    [ LEVEL_FATAL ]: log(LEVEL_FATAL)\n  };\n\n  return logger;\n\n  /**\n   * @param {string} level\n   * @returns {function(string, ...[*])}\n   */\n  function log(level) {\n    return (message, ...payload) => {\n      if (LEVELS[ logger.level ] < LEVELS[ level ]) {\n        return logger;\n      }\n\n      app\n        .act({ cmd: 'logger', level, message, payload })\n        .catch(result => console.log(`${ level }\\t${ message }`, ...payload));\n\n      return logger;\n    };\n  }\n}"]}