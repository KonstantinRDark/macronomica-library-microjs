{"version":3,"sources":["../../src/methods/log.js"],"names":["LEVELS","app","level","logger","log","usePluginLogger","on","process","error","fatal","warn","message","meta","Error","payload","messageInstanceError","metaInstanceError","getFatalError","getError","Array","isArray","forEach","emitOne","id","name","emit","args","console","Date","time","started","toISOString","stack","join","inspect","depth","details","versions","replace","features","moduleLoadList","pid","arch","platform","execPath","argv","env"],"mappings":"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","file":"log.js","sourcesContent":["import Util from 'util';\nimport isPlainObject from 'lodash.isplainobject';\nimport {\n  LEVEL_DEFAULT,\n  LEVEL_ALL,\n  LEVEL_OFF,\n  LEVEL_INFO,\n  LEVEL_TRACE,\n  LEVEL_DEBUG,\n  LEVEL_WARN,\n  LEVEL_ERROR,\n  LEVEL_FATAL,\n} from './../constants';\n\n/**\n * @name LEVELS\n * @type {Object<string, number>}\n * @enum {number}\n */\nexport const LEVELS = {\n  [ LEVEL_OFF ]: 0,\n\n  [ LEVEL_FATAL ]: 10,\n  [ LEVEL_ERROR ]: 20,\n  [ LEVEL_WARN  ]: 30,\n  [ LEVEL_INFO  ]: 40,\n  [ LEVEL_TRACE ]: 50,\n  [ LEVEL_DEBUG ]: 60,\n\n  [ LEVEL_ALL ]: 100\n};\n\n/**\n * @param {app} app\n * @param { string } [level]\n * @returns {object}\n */\nexport default (app, { level = LEVEL_DEFAULT } = {}) => {\n  /**\n   * Levels:\n   *\n   * ALL    Все уровни\n   * OFF    Отключить ведение журнала\n   *\n   * INFO   Информационные сообщения\n   * TRACE  Информационные сообщения, с дополнительной информацией\n   * DEBUG  Информационные события, которые наиболее полезны для отладки приложения.\n   *\n   * WARN   Предупреждения о потенциально опасных ситуациях\n   * ERROR  Ошибка, но которая позволяет приложению продолжать работать\n   * FATAL  Ошибка, которая приводит завершению приложения\n   */\n\n  /**\n   * @namespace app.log\n   */\n  const logger = {\n    /**\n     * @memberof app.log\n     * @type {string}\n     */\n    level,\n    /**\n     * @memberof app.log\n     * @type {Object<!string, !number>}\n     */\n    LEVELS,\n    /**\n     * @memberof app.log\n     * @name debug\n     * @param {string|Array<string>} message\n     * @param {*} [payload]\n     */\n    [ LEVEL_DEBUG ]: log(LEVEL_DEBUG),\n    /**\n     * @memberof app.log\n     * @name trace\n     * @param {string|Array<string>} message\n     * @param {*} [payload]\n     */\n    [ LEVEL_TRACE ]: log(LEVEL_TRACE),\n    /**\n     * @memberof app.log\n     * @name info\n     * @param {string|Array<string>} message\n     * @param {*} [payload]\n     */\n    [ LEVEL_INFO ] : log(LEVEL_INFO),\n    /**\n     * @memberof app.log\n     * @name warn\n     * @param {string|Array<string>} message\n     * @param {*} [payload]\n     */\n    [ LEVEL_WARN ] : log(LEVEL_WARN),\n    /**\n     * @memberof app.log\n     * @name error\n     * @param {string|Array<string>} message\n     * @param {*} [payload]\n     */\n    [ LEVEL_ERROR ]: log(LEVEL_ERROR),\n    /**\n     * @memberof app.log\n     * @name fatal\n     * @param {string|Array<string>} message\n     * @param {*} [payload]\n     */\n    [ LEVEL_FATAL ]: log(LEVEL_FATAL)\n  };\n  let usePluginLogger;\n\n  app.on('plugin.logger.use', () => usePluginLogger = true);\n  app.on('plugin.logger.unuse', () => usePluginLogger = false);\n\n  process.on('uncaughtException', error => logger.fatal('uncaughtException', error));\n  process.on('unhandledRejection', error => logger.warn('unhandledRejection', error));\n  \n  return logger;\n\n  /**\n   * @param {string} level\n   * @returns {function(string, payload)}\n   */\n  function log(level) {\n    return (message, meta = {}) => {\n      if (LEVELS[ logger.level ] < LEVELS[ level ]) {\n        return logger;\n      }\n\n      if (!isPlainObject(meta)) {\n        meta = meta instanceof Error ? { error: meta } : { payload: meta };\n      }\n\n      const messageInstanceError = message instanceof Error;\n      const metaInstanceError = meta.error instanceof Error;\n\n      if (level === LEVEL_FATAL) {\n        const error = metaInstanceError\n          ? meta.error\n          : messageInstanceError ? message : new Error(message);\n        message = error.message;\n        meta.error = getFatalError(app, error, meta);\n      }\n\n      if (level === LEVEL_ERROR && (metaInstanceError || messageInstanceError)) {\n        const error = metaInstanceError ? meta.error : message;\n        message = error.message;\n        meta.error = getError(app, error, meta);\n      }\n\n      if (Array.isArray(message)) {\n        message.forEach(emitOne);\n      } else {\n        emitOne(message);\n      }\n\n      return logger;\n\n      function emitOne(message) {\n        meta = Object.assign(meta, {\n          app: { id: app.id, name: app.name }\n        });\n\n        if (usePluginLogger) {\n          app.emit('log', { level, message, meta });\n          app.emit(`log.${ level }`, { level, message, meta });\n        } else {\n          const args = [\n            `${ level }`,\n            message,\n            JSON.stringify(meta, '', 4)\n          ];\n\n          switch (level) {\n            case LEVEL_ERROR:\n            case LEVEL_FATAL:\n              console.error(...args);\n              break;\n            case LEVEL_WARN:\n              console.warn(...args);\n              break;\n            default:\n              console.log(...args);\n          }\n        }\n      }\n    };\n  }\n};\n\nfunction getError(app, error, meta) {\n  return [\n    `Error instanceof ${ error.name }`,\n    '#######################################',\n    `# Instance   : ${ app.name }`,\n    `# Instance Id: ${ app.id }`,\n    '# Started At : ' + (new Date(app.time.started)).toISOString(),\n    '# =====================================',\n    '  Message    : ' + error.message,\n    '  When       : ' + (new Date()).toISOString(),\n    '  Stack      : ' + error.stack || '',\n    '#######################################'\n  ].join('\\n');\n}\nfunction getFatalError(app, error, meta) {\n  return [\n    `Fatal instanceof ${ error.name }`,\n    '#######################################',\n    `# Instance   : ${ app.name }`,\n    `# Instance Id: ${ app.id }`,\n    '# Started At : ' + (new Date(app.time.started)).toISOString(),\n    '# =====================================',\n    '  Message    : ' + error.message,\n    '  Payload    : ' + Util.inspect(meta, { depth: null }),\n    '  Details    : ' + Util.inspect(error.details, { depth: null }),\n    '  When       : ' + (new Date()).toISOString(),\n    '  Stack      : ' + error.stack || '',\n    '  Node       : ' + Util.inspect(process.versions).replace(/\\s+/g, ' '),\n    '               ' + Util.inspect(process.features).replace(/\\s+/g, ' '),\n    '               ' + Util.inspect(process.moduleLoadList).replace(/\\s+/g, ' '),\n    '  Process    : ',\n    '               pid=' + process.pid,\n    '               arch=' + process.arch,\n    '               platform=' + process.platform,\n    '               path=' + process.execPath,\n    '               argv=' + Util.inspect(process.argv).replace(/\\n/g, ''),\n    '               env=' + Util.inspect(process.env).replace(/\\n/g, ''),\n    '#######################################'\n  ].join('\\n');\n}\n"]}