{"version":3,"sources":["../../src/methods/log.js"],"names":["LEVEL_ALL","LEVEL_OFF","LEVEL_INFO","LEVEL_TRACE","LEVEL_DEBUG","LEVEL_WARN","LEVEL_ERROR","LEVEL_FATAL","LEVELS","app","level","logger","log","usePluginLogger","on","message","payload","emit","args","push","JSON","stringify","error","warn"],"mappings":";;;;;;;;;;AACO,IAAMA,gCAAY,KAAlB;AACA,IAAMC,gCAAY,KAAlB;AACA,IAAMC,kCAAa,MAAnB;AACA,IAAMC,oCAAc,OAApB;AACA,IAAMC,oCAAc,OAApB;AACA,IAAMC,kCAAa,MAAnB;AACA,IAAMC,oCAAc,OAApB;AACA,IAAMC,oCAAc,OAApB;AACP;;;;;AAKO,IAAMC,kEACTR,SADS,EACI,CADJ,4BAGTO,WAHS,EAGM,EAHN,4BAITD,WAJS,EAIM,EAJN,4BAKTD,UALS,EAKM,EALN,4BAMTH,UANS,EAMM,EANN,4BAOTC,WAPS,EAOM,EAPN,4BAQTC,WARS,EAQM,EARN,4BAUTH,SAVS,EAUI,GAVJ,WAAN;;AAaP;;;;;;kBAKe,UAACQ,GAAD,EAAuC;AAAA;;AAAA,iFAAP,EAAO;AAAA,wBAA/BC,KAA+B;AAAA,MAA/BA,KAA+B,8BAAvBN,WAAuB;;AACpD;;;;;;;;;;;;;;;AAeA;;;AAGA,MAAMO;AACJ;;;;AAIAD,gBALI;AAMJ;;;;AAIAF;AAVI,8BAiBFJ,WAjBE,EAiBaQ,IAAIR,WAAJ,CAjBb,4BAwBFD,WAxBE,EAwBaS,IAAIT,WAAJ,CAxBb,4BA+BFD,UA/BE,EA+BaU,IAAIV,UAAJ,CA/Bb,4BAsCFG,UAtCE,EAsCaO,IAAIP,UAAJ,CAtCb,4BA6CFC,WA7CE,EA6CaM,IAAIN,WAAJ,CA7Cb,4BAoDFC,WApDE,EAoDaK,IAAIL,WAAJ,CApDb,WAAN;AAsDA,MAAIM,wBAAJ;;AAEAJ,MAAIK,EAAJ,CAAO,mBAAP,EAA4B;AAAA,WAAMD,kBAAkB,IAAxB;AAAA,GAA5B;AACAJ,MAAIK,EAAJ,CAAO,qBAAP,EAA8B;AAAA,WAAMD,kBAAkB,KAAxB;AAAA,GAA9B;;AAEA,SAAOF,MAAP;;AAEA;;;;AAIA,WAASC,GAAT,CAAaF,KAAb,EAAoB;AAClB,WAAO,UAACK,OAAD,EAAUC,OAAV,EAAsB;AAAA;;AAC3B,UAAIR,OAAQG,OAAOD,KAAf,IAAyBF,OAAQE,KAAR,CAA7B,EAA8C;AAC5C,eAAOC,MAAP;AACD;;AAED,UAAIE,eAAJ,EAAqB;AACnBJ,YAAIQ,IAAJ,CAAS,KAAT,EAAgB,EAAEP,YAAF,EAASK,gBAAT,EAAkBC,gBAAlB,EAAhB;AACAP,YAAIQ,IAAJ,UAAiBP,KAAjB,EAA2B,EAAEA,YAAF,EAASK,gBAAT,EAAkBC,gBAAlB,EAA3B;AACD,OAHD,MAGO;AACL,YAAME,OAAO,CAAMR,KAAN,SAAkBK,OAAlB,CAAb;;AAEA,YAAI,CAAC,CAACC,OAAN,EAAe;AACbE,eAAKC,IAAL,CAAUC,KAAKC,SAAL,CAAeL,OAAf,EAAwB,EAAxB,EAA4B,CAA5B,CAAV;AACD;;AAED,gBAAQN,KAAR;AACE,eAAKJ,WAAL;AACA,eAAKC,WAAL;AACE,iCAAQe,KAAR,iBAAiBJ,IAAjB;AACA;AACF,eAAKb,UAAL;AACE,kCAAQkB,IAAR,kBAAgBL,IAAhB;AACA;AACF;AACE,kCAAQN,GAAR,kBAAeM,IAAf;AATJ;AAWD;;AAED,aAAOP,MAAP;AACD,KA7BD;AA8BD;AACF,C","file":"log.js","sourcesContent":["\nexport const LEVEL_ALL = 'all';\nexport const LEVEL_OFF = 'off';\nexport const LEVEL_INFO = 'info';\nexport const LEVEL_TRACE = 'trace';\nexport const LEVEL_DEBUG = 'debug';\nexport const LEVEL_WARN = 'warn';\nexport const LEVEL_ERROR = 'error';\nexport const LEVEL_FATAL = 'fatal';\n/**\n * @name LEVELS\n * @type {Object<string, number>}\n * @enum {number}\n */\nexport const LEVELS = {\n  [ LEVEL_ALL ]: 0,\n\n  [ LEVEL_FATAL ]: 10,\n  [ LEVEL_ERROR ]: 20,\n  [ LEVEL_WARN  ]: 30,\n  [ LEVEL_INFO  ]: 40,\n  [ LEVEL_TRACE ]: 50,\n  [ LEVEL_DEBUG ]: 60,\n\n  [ LEVEL_OFF ]: 100\n};\n\n/**\n * @param {app} app\n * @param { string } [level]\n * @returns {object}\n */\nexport default (app, { level = LEVEL_DEBUG } = {}) => {\n  /**\n   * Levels:\n   *\n   * ALL    Все уровни\n   * OFF    Отключить ведение журнала\n   *\n   * INFO   Информационные сообщения\n   * TRACE  Информационные сообщения, с дополнительной информацией\n   * DEBUG  Информационные события, которые наиболее полезны для отладки приложения.\n   *\n   * WARN   Предупреждения о потенциально опасных ситуациях\n   * ERROR  Ошибка, но которая позволяет приложению продолжать работать\n   * FATAL  Ошибка, которая приводит завершению приложения\n   */\n\n  /**\n   * @namespace app.log\n   */\n  const logger = {\n    /**\n     * @memberof app.log\n     * @type {string}\n     */\n    level,\n    /**\n     * @memberof app.log\n     * @type {Object<!string, !number>}\n     */\n    LEVELS,\n    /**\n     * @memberof app.log\n     * @name debug\n     * @param {string} message\n     * @param {*} [payload]\n     */\n    [ LEVEL_DEBUG ]: log(LEVEL_DEBUG),\n    /**\n     * @memberof app.log\n     * @name trace\n     * @param {string} message\n     * @param {*} [payload]\n     */\n    [ LEVEL_TRACE ]: log(LEVEL_TRACE),\n    /**\n     * @memberof app.log\n     * @name info\n     * @param {string} message\n     * @param {*} [payload]\n     */\n    [ LEVEL_INFO ] : log(LEVEL_INFO),\n    /**\n     * @memberof app.log\n     * @name warn\n     * @param {string} message\n     * @param {*} [payload]\n     */\n    [ LEVEL_WARN ] : log(LEVEL_WARN),\n    /**\n     * @memberof app.log\n     * @name error\n     * @param {string} message\n     * @param {*} [payload]\n     */\n    [ LEVEL_ERROR ]: log(LEVEL_ERROR),\n    /**\n     * @memberof app.log\n     * @name fatal\n     * @param {string} message\n     * @param {*} [payload]\n     */\n    [ LEVEL_FATAL ]: log(LEVEL_FATAL)\n  };\n  let usePluginLogger;\n\n  app.on('plugin.logger.use', () => usePluginLogger = true);\n  app.on('plugin.logger.unuse', () => usePluginLogger = false);\n\n  return logger;\n\n  /**\n   * @param {string} level\n   * @returns {function(string, payload)}\n   */\n  function log(level) {\n    return (message, payload) => {\n      if (LEVELS[ logger.level ] < LEVELS[ level ]) {\n        return logger;\n      }\n\n      if (usePluginLogger) {\n        app.emit('log', { level, message, payload });\n        app.emit(`log.${ level }`, { level, message, payload });\n      } else {\n        const args = [ `${ level }\\t`, message ];\n\n        if (!!payload) {\n          args.push(JSON.stringify(payload, '', 4));\n        }\n\n        switch (level) {\n          case LEVEL_ERROR:\n          case LEVEL_FATAL:\n            console.error(...args);\n            break;\n          case LEVEL_WARN:\n            console.warn(...args);\n            break;\n          default:\n            console.log(...args);\n        }\n      }\n\n      return logger;\n    };\n  }\n}"]}