{"version":3,"sources":["../../src/methods/log.js"],"names":["log","LEVEL_ALL","LEVEL_OFF","LEVEL_INFO","LEVEL_TRACE","LEVEL_DEBUG","LEVEL_WARN","LEVEL_ERROR","LEVEL_FATAL","LEVELS","microjs","level","logger","Object","assign","message","payload","act","cmd","catch"],"mappings":";;;;;kBAsBwBA,G;;;;AArBjB,IAAMC,gCAAY,KAAlB;AACA,IAAMC,gCAAY,KAAlB;AACA,IAAMC,kCAAa,MAAnB;AACA,IAAMC,oCAAc,OAApB;AACA,IAAMC,oCAAc,OAApB;AACA,IAAMC,kCAAa,MAAnB;AACA,IAAMC,oCAAc,OAApB;AACA,IAAMC,oCAAc,OAApB;AACA,IAAMC,0BAAS;AACpBR,aAAW,CADS;;AAGpBE,cAAa,EAHO;AAIpBC,eAAa,EAJO;AAKpBC,eAAa,EALO;AAMpBC,cAAa,EANO;AAOpBC,eAAa,EAPO;AAQpBC,eAAa,EARO;;AAUpBN,aAAW;AAVS,CAAf;;AAaQ,SAASF,GAAT,CAAaU,OAAb,EAAoD;AAAA;;AAAA,iFAAJ,EAAI;AAAA,wBAA5BC,KAA4B;AAAA,MAA5BA,KAA4B,8BAApBN,WAAoB;;AACjE;;;;;;;;;;;;;;AAcA,MAAMO,SAAS,EAAf;;AAEA,SAAOC,OAAOC,MAAP,CAAcF,MAAd;AACLD,gBADK;AAELF;AAFK,qCAGHJ,WAHG,EAGYL,IAAIK,WAAJ,CAHZ,mCAIHD,WAJG,EAIYJ,IAAII,WAAJ,CAJZ,mCAKHD,UALG,EAKYH,IAAIG,UAAJ,CALZ,mCAMHG,UANG,EAMYN,IAAIM,UAAJ,CANZ,mCAOHC,WAPG,EAOYP,IAAIO,WAAJ,CAPZ,mCAQHC,WARG,EAQYR,IAAIQ,WAAJ,CARZ,mBAAP;;AAWA,WAASR,GAAT,CAAaW,KAAb,EAAoB;AAClB,WAAO,UAACI,OAAD,EAAyB;AAAA,wCAAZC,OAAY;AAAZA,eAAY;AAAA;;AAC9B,UAAIP,OAAQG,OAAOD,KAAf,IAAyBF,OAAQE,KAAR,CAA7B,EAA8C;AAC5C,eAAOC,MAAP;AACD;;AAEDF,cACGO,GADH,CACO,EAAEC,KAAK,QAAP,EAAiBP,YAAjB,EAAwBI,gBAAxB,EAAiCC,gBAAjC,EADP,EAEGG,KAFH,CAES;AAAA;;AAAA,eAAU,qBAAQnB,GAAR,kBAAYe,OAAZ,SAAwBC,OAAxB,EAAV;AAAA,OAFT;;AAIA,aAAOJ,MAAP;AACD,KAVD;AAWD;AACF","file":"log.js","sourcesContent":["\nexport const LEVEL_ALL = 'all';\nexport const LEVEL_OFF = 'off';\nexport const LEVEL_INFO = 'info';\nexport const LEVEL_TRACE = 'trace';\nexport const LEVEL_DEBUG = 'debug';\nexport const LEVEL_WARN = 'warn';\nexport const LEVEL_ERROR = 'error';\nexport const LEVEL_FATAL = 'fatal';\nexport const LEVELS = {\n  LEVEL_ALL: 0,\n\n  LEVEL_INFO : 10,\n  LEVEL_TRACE: 20,\n  LEVEL_DEBUG: 30,\n  LEVEL_WARN : 40,\n  LEVEL_ERROR: 50,\n  LEVEL_FATAL: 60,\n\n  LEVEL_OFF: 100\n};\n\nexport default function log(microjs, { level = LEVEL_DEBUG } = {}) {\n  /**\n   * Levels:\n   *\n   * ALL    Все уровни\n   * OFF    Отключить ведение журнала\n   *\n   * INFO   Информационные сообщения\n   * TRACE  Информационные сообщения, с дополнительной информацией\n   * DEBUG  Информационные события, которые наиболее полезны для отладки приложения.\n   *\n   * WARN   Предупреждения о потенциально опасных ситуациях\n   * ERROR  Ошибка, но которая позволяет приложению продолжать работать\n   * FATAL  Ошибка, которая приводит завершению приложения\n   */\n  const logger = {};\n\n  return Object.assign(logger, {\n    level,\n    LEVELS,\n    [ LEVEL_DEBUG ]: log(LEVEL_DEBUG),\n    [ LEVEL_TRACE ]: log(LEVEL_TRACE),\n    [ LEVEL_INFO ] : log(LEVEL_INFO),\n    [ LEVEL_WARN ] : log(LEVEL_WARN),\n    [ LEVEL_ERROR ]: log(LEVEL_ERROR),\n    [ LEVEL_FATAL ]: log(LEVEL_FATAL),\n  });\n\n  function log(level) {\n    return (message, ...payload) => {\n      if (LEVELS[ logger.level ] < LEVELS[ level ]) {\n        return logger;\n      }\n\n      microjs\n        .act({ cmd: 'logger', level, message, payload })\n        .catch(result => console.log(message, ...payload));\n\n      return logger;\n    };\n  }\n}"]}