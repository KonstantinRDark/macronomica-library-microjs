{"version":3,"sources":["../../src/methods/act.js"],"names":["app","pin","cb","state","exec","dfd","on","setTimeout","resolve","promise","msg","route","manager","find","log","trace","reject","callback","then","Promise","catch","err","error"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AAEA;;;;kBAIeA,OAAO;AACpB;;;;;;AAMA,SAAO,CAACC,GAAD,EAAMC,EAAN,KAAa;AAClB,QAAIF,IAAIG,KAAJ,yBAAJ,EAA6B;AAC3B,aAAOC,MAAP;AACD;AACD,QAAIC,MAAM,qBAAMD,IAAN,CAAV;;AAEAJ,QAAIM,EAAJ,CAAO,SAAP,EAAkB,MAAMC,WAAWF,IAAIG,OAAf,EAAwB,EAAxB,CAAxB;;AAEA,WAAOH,IAAII,OAAX;;AAEA,aAASL,IAAT,GAAgB;AACd,YAAMC,MAAM,qBAAMH,EAAN,CAAZ;AACA,YAAMQ,MAAM,sBAAST,GAAT,IAAgB,sBAAOA,GAAP,CAAhB,GAA8BA,GAA1C;AACA,YAAMU,QAAQX,IAAIY,OAAJ,CAAYC,IAAZ,CAAiBH,GAAjB,CAAd;;AAEA,UAAI,CAACC,KAAL,EAAY;AACVX,YAAIc,GAAJ,CAAQC,KAAR,CAAe,iCAAf,EAAiDd,GAAjD;AACA,eAAOI,IAAIW,MAAJ,CAAY,iCAAZ,CAAP;AACD;;AAED,UAAI;AACF,YAAIP,UAAUE,MAAMM,QAAN,CAAeP,GAAf,EAAoBC,KAApB,CAAd;;AAEA,YAAI,CAACF,OAAD,IAAY,OAAOA,QAAQS,IAAf,KAAwB,UAAxC,EAAoD;AAClDT,oBAAUU,QAAQX,OAAR,CAAgBC,OAAhB,CAAV;AACD;;AAEDA,gBAAQS,IAAR,CAAab,IAAIG,OAAjB,EAA0BY,KAA1B,CAAgCf,IAAIW,MAApC;;AAEA,eAAOX,IAAII,OAAX;AACD,OAVD,CAUE,OAAOY,GAAP,EAAY;AACZrB,YAAIc,GAAJ,CAAQQ,KAAR,CAAe,4BAAf,EAA4CrB,GAA5C,EAAiDoB,GAAjD;AACA,eAAOhB,IAAIW,MAAJ,CAAWK,GAAX,CAAP;AACD;AACF;AACF,GAnCD;AAoCD,C","file":"act.js","sourcesContent":["import isString from 'lodash.isstring';\nimport jsonic from 'jsonic';\nimport defer from './../utils/defer';\nimport { STATE_RUN } from './../constants';\n\n/**\n * @param {app} app\n * @returns {function:app}\n */\nexport default app => {\n  /**\n   * @namespace app.act\n   * @param {string|object} pin\n   * @param {function} [cb]\n   * @returns {app}\n   */\n  return (pin, cb) => {\n    if (app.state === STATE_RUN) {\n      return exec();\n    }\n    let dfd = defer(exec);\n\n    app.on('running', () => setTimeout(dfd.resolve, 10));\n\n    return dfd.promise;\n\n    function exec() {\n      const dfd = defer(cb);\n      const msg = isString(pin) ? jsonic(pin) : pin;\n      const route = app.manager.find(msg);\n\n      if (!route) {\n        app.log.trace(`Вызов не существующего маршрута`, pin);\n        return dfd.reject(`Вызов не существующего маршрута`);\n      }\n\n      try {\n        let promise = route.callback(msg, route);\n\n        if (!promise || typeof promise.then !== 'function') {\n          promise = Promise.resolve(promise);\n        }\n\n        promise.then(dfd.resolve).catch(dfd.reject);\n\n        return dfd.promise;\n      } catch (err) {\n        app.log.error(`Ошибка при вызове маршрута`, pin, err);\n        return dfd.reject(err);\n      }\n    }\n  };\n}"]}