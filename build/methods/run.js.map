{"version":3,"sources":["../../src/methods/run.js"],"names":["run","app","settings","useServer","transport","otherSettings","runDeferred","promise","cb","Promise","resolve","then","act","catch","use","cmd","reject"],"mappings":";;;;;kBASwBA,G;;AATxB;;;;AACA;;;;AACA;;;;;;;;AAEA;;;;;AAKe,SAASA,GAAT,CAAaC,GAAb,EAAkBC,QAAlB,EAA4B;AACzC,MAAMC,YAAY,CAAC,CAACD,QAApB;;AADyC,aAEQA,YAAY,EAFpB;AAAA,4BAEjCE,SAFiC;AAAA,MAEjCA,SAFiC,kCAErB,MAFqB;AAAA,MAEVC,aAFU;;AAIzC;;;AACA,MAAIC,oBAAJ;AACA;;;;;AAKA,SAAO,cAAM;AACX,QAAIA,WAAJ,EAAiB;AACf,aAAOA,YAAYC,OAAnB;AACD;;AAEDD,kBAAc,qBAAME,EAAN,CAAd;AACA,QAAID,UAAUE,QAAQC,OAAR,EAAd;;AAEA,QAAIP,SAAJ,EAAe;AACbI,gBAAUA;AACN;AADM,OAELI,IAFK,CAEA;AAAA,eAAMV,IAAIW,GAAJ,CAAQ,EAAER,oBAAF,EAAR,CAAN;AAAA,OAFA;AAGN;AAHM,OAILS,KAJK,CAIC;AAAA,eAAMZ,IAAIa,GAAJ,CAAQ,wBAAeT,aAAf,CAAR,CAAN;AAAA,OAJD,CAAV;AAKD;;AAEDE;AACE;AADF,KAEGI,IAFH,CAEQ;AAAA,aAAM,kCAAmBV,GAAnB,CAAN;AAAA,KAFR;AAGE;AAHF,KAIGU,IAJH,CAIQ;AAAA,aAAMR,YACRF,IAAIW,GAAJ,CAAQ,EAAER,oBAAF,EAAaW,KAAK,QAAlB,EAAR,CADQ,GAERN,QAAQC,OAAR,EAFE;AAAA,KAJR,EAOGC,IAPH,CAOQ,YAAM;AACV,aAAOL,YAAYI,OAAZ,CAAoBT,GAApB,CAAP;AACD,KATH,EAUGY,KAVH,CAUSP,YAAYU,MAVrB;;AAYA,WAAOV,YAAYC,OAAnB;AACD,GA7BD;AA8BD","file":"run.js","sourcesContent":["import defer from './../utils/defer';\nimport NodeHttpPlugin from './../plugins/node-http';\nimport runInitSubscribers from './../utils/run-init-subscribers';\n\n/**\n * @param {app} app                                 // Экземпляр библиотеки\n * @param {object} settings                         // Настройки для запуска сервера\n * @returns {function:Promise}\n */\nexport default function run(app, settings) {\n  const useServer = !!settings;\n  const { transport = 'http', ...otherSettings } = settings || {};\n\n  // Ссылка на обещание запуска\n  let runDeferred;\n  /**\n   * @namespace app.run\n   * @param {function} [cb]\n   * @returns {Promise<app>}\n   */\n  return cb => {\n    if (runDeferred) {\n      return runDeferred.promise;\n    }\n\n    runDeferred = defer(cb);\n    let promise = Promise.resolve();\n\n    if (useServer) {\n      promise = promise\n          // Проверяем наличие транспорта для сервера\n          .then(() => app.act({ transport }))\n          // если не найден транспорт - добавим в плагины транспорт по умолчанию\n          .catch(() => app.use(NodeHttpPlugin(otherSettings)));\n    }\n\n    promise\n      // Запустим всех подписчиков на этап инициализации\n      .then(() => runInitSubscribers(app))\n      // Запустим прослушку транспорта для сервера\n      .then(() => useServer\n        ? app.act({ transport, cmd: 'listen' })\n        : Promise.resolve())\n      .then(() => {\n        return runDeferred.resolve(app);\n      })\n      .catch(runDeferred.reject);\n\n    return runDeferred.promise;\n  };\n}"]}