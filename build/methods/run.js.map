{"version":3,"sources":["../../src/methods/run.js"],"names":["run","app","runDeferred","transports","http","on","type","listen","cb","useServer","settings","transport","otherSettings","promise","log","info","time","started","use","defaultTransportPlugin","then","Promise","resolve","emit","catch","reject"],"mappings":";;;;;;;;kBASwBA,G;;AATxB;;;;AACA;;;;AACA;;;;AACA;;;;;;;;AAEA;;;;AAIe,SAASA,GAAT,CAAaC,GAAb,EAAkB;AAC/B;AACA,MAAIC,WAAJ;AACA,MAAIC,aAAa;AACfC,UAAM;AADS,GAAjB;;AAIAH,MAAII,EAAJ,CAAO,kBAAP,EAA2B,CAACC,IAAD,EAAOC,MAAP,KAAkBJ,WAAYG,IAAZ,IAAqBC,MAAlE;;AAEA;;;;;AAKA,SAAOC,MAAM;AACX,UAAMC,YAAY,CAAC,CAACR,IAAIS,QAAJ,CAAaH,MAAjC;;AADW,eAEsCN,IAAIS,QAAJ,CAAaH,MAAb,IAAuB,EAF7D;AAAA,8BAEHI,SAFG;;AAAA,UAEHA,SAFG,kCAES,MAFT;AAAA,UAEoBC,aAFpB;;AAIX,QAAIV,WAAJ,EAAiB;AACf,aAAOA,YAAYW,OAAnB;AACD;;AAEDZ,QAAIa,GAAJ,CAAQC,IAAR,CAAc,eAAc,6BAAcd,IAAIe,IAAJ,CAASC,OAAvB,CAAiC,GAA7D;AACAf,kBAAc,qBAAMM,EAAN,CAAd;;AAEA;AACA,QAAIC,aAAa,OAAOE,UAAWA,SAAX,CAAP,KAAkC,UAAnD,EAA+D;AAC7D;AACAV,UAAIiB,GAAJ,CAAQjB,IAAIkB,sBAAJ,cAAgCP,aAAhC,EAAR;AACD;;AAED;AACA,sCAAmBX,GAAnB;AACE;AADF,KAEGmB,IAFH,CAEQ,MAAM,iCAAkBnB,GAAlB,CAFd;AAGE;AAHF,KAIGmB,IAJH,CAIQ,MAAM;AACV,UAAG,CAACX,SAAJ,EAAe;AACb,eAAOY,QAAQC,OAAR,EAAP;AACD;;AAED,aAAOnB,WAAYQ,SAAZ,GAAP;AACD,KAVH,EAWGS,IAXH,CAWQ,MAAM;AACVnB,UAAIsB,IAAJ,CAAS,SAAT,EAAoBtB,GAApB;AACAC,kBAAYoB,OAAZ,CAAoBrB,GAApB;AACD,KAdH,EAeGuB,KAfH,CAeStB,YAAYuB,MAfrB;;AAiBA,WAAOvB,YAAYW,OAAnB;AACD,GApCD;AAqCD","file":"run.js","sourcesContent":["import defer from './../utils/defer';\nimport dateIsoString from './../utils/date-iso-string';\nimport runInitSubscribers from './../utils/run-init-subscribers';\nimport runAddSubscribers from './../utils/run-add-subscribers';\n\n/**\n * @param {app} app                                 // Экземпляр библиотеки\n * @returns {function:Promise}\n */\nexport default function run(app) {\n  // Ссылка на обещание запуска\n  let runDeferred;\n  let transports = {\n    http: null\n  };\n\n  app.on('plugin.transport', (type, listen) => transports[ type ] = listen);\n\n  /**\n   * @namespace app.run\n   * @param {function} [cb]\n   * @returns {Promise<app>}\n   */\n  return cb => {\n    const useServer = !!app.settings.listen;\n    const { transport = 'http', ...otherSettings } = app.settings.listen || {};\n\n    if (runDeferred) {\n      return runDeferred.promise;\n    }\n\n    app.log.info(`started at ${ dateIsoString(app.time.started) }`);\n    runDeferred = defer(cb);\n\n    // Проверяем наличие транспорта для сервера\n    if (useServer && typeof transport[ transport ] !== 'function') {\n      // если не найден транспорт - добавим в плагины транспорт по умолчанию\n      app.use(app.defaultTransportPlugin({ ...otherSettings }));\n    }\n\n    // Запустим всех подписчиков на этап инициализации\n    runInitSubscribers(app)\n      // Запустим всех подписчиков на этап регисрации действий\n      .then(() => runAddSubscribers(app))\n      // Запустим прослушку транспорта для сервера\n      .then(() => {\n        if(!useServer) {\n          return Promise.resolve();\n        }\n\n        return transports[ transport ]();\n      })\n      .then(() => {\n        app.emit('running', app);\n        runDeferred.resolve(app);\n      })\n      .catch(runDeferred.reject);\n\n    return runDeferred.promise;\n  };\n}"]}