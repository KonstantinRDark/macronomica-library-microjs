{"version":3,"sources":["../../src/methods/run.js"],"names":["run","microjs","settings","subscribers","promises","useServer","transport","otherSettings","runDeferred","promise","cb","Promise","resolve","then","act","catch","use","end","cmd","reject"],"mappings":";;;;;kBAWwBA,G;;AAXxB;;;;AACA;;;;AACA;;;;;;;;AAEA;;;;;;;AAOe,SAASA,GAAT,CAAaC,OAAb,QAAiDC,QAAjD,EAA2D;AAAA,MAAnCC,WAAmC,QAAnCA,WAAmC;AAAA,MAAtBC,QAAsB,QAAtBA,QAAsB;;AACxE,MAAMC,YAAY,CAAC,CAACH,QAApB;;AADwE,cAEvBA,YAAY,EAFW;AAAA,8BAEhEI,SAFgE;AAAA,MAEhEA,SAFgE,mCAEpD,MAFoD;AAAA,MAEzCC,aAFyC;;AAIxE;;;AACA,MAAIC,oBAAJ;;AAEA,SAAO,cAAM;AACX,QAAIA,WAAJ,EAAiB;AAAE,aAAOA,YAAYC,OAAnB;AAA4B;;AAE/CD,kBAAc,qBAAME,EAAN,CAAd;AACA,QAAID,UAAUE,QAAQC,OAAR,EAAd;;AAEA,QAAIP,SAAJ,EAAe;AACbI,gBAAUA;AACN;AADM,OAELI,IAFK,CAEA;AAAA,eAAMZ,QAAQa,GAAR,CAAY,EAAER,oBAAF,EAAZ,CAAN;AAAA,OAFA;AAGN;AAHM,OAILS,KAJK,CAIC;AAAA,eAAMd,QAAQe,GAAR,CAAY,wBAAeT,aAAf,CAAZ,CAAN;AAAA,OAJD,CAAV;AAKD;;AAEDE;AACE;AADF,KAEGI,IAFH,CAEQ;AAAA,aAAM,kCAAmBZ,OAAnB,EAA4BE,YAAYH,GAAxC,EAA6CG,YAAYc,GAAzD,CAAN;AAAA,KAFR;AAGE;AAHF,KAIGJ,IAJH,CAIQ;AAAA,aAAMR,YACRJ,QAAQa,GAAR,CAAY,EAAER,oBAAF,EAAaY,KAAK,QAAlB,EAAZ,CADQ,GAERP,QAAQC,OAAR,EAFE;AAAA,KAJR,EAOGC,IAPH,CAOQ;AAAA,aAAML,YAAYI,OAAZ,CAAoBX,OAApB,CAAN;AAAA,KAPR,EAQGc,KARH,CAQSP,YAAYW,MARrB;;AAUA,WAAOX,YAAYC,OAAnB;AACD,GAzBD;AA0BD","file":"run.js","sourcesContent":["import defer from './../utils/defer';\nimport NodeHttpPlugin from './../plugins/node-http';\nimport runInitSubscribers from './../utils/run-init-subscribers';\n\n/**\n * @param {object} microjs                          // Экземпляр библиотеки\n * @param {{ run: [], end: [] }} subscribers        // Список подписчиков\n * @param {{ run: promise, end: promise }} promises // Список ожиданий\n * @param {object} settings                         // Настройки для запуска сервера\n * @returns {function(?function):Promise}\n */\nexport default function run(microjs, { subscribers, promises }, settings) {\n  const useServer = !!settings;\n  const { transport = 'http', ...otherSettings } = settings || {};\n\n  // Ссылка на обещание запуска\n  let runDeferred;\n\n  return cb => {\n    if (runDeferred) { return runDeferred.promise }\n\n    runDeferred = defer(cb);\n    let promise = Promise.resolve();\n\n    if (useServer) {\n      promise = promise\n          // Проверяем наличие транспорта для сервера\n          .then(() => microjs.act({ transport }))\n          // если не найден транспорт - добавим в плагины транспорт по умолчанию\n          .catch(() => microjs.use(NodeHttpPlugin(otherSettings)));\n    }\n\n    promise\n      // Запустим всех подписчиков на этап инициализации\n      .then(() => runInitSubscribers(microjs, subscribers.run, subscribers.end))\n      // Запустим прослушку транспорта для сервера\n      .then(() => useServer\n        ? microjs.act({ transport, cmd: 'listen' })\n        : Promise.resolve())\n      .then(() => runDeferred.resolve(microjs))\n      .catch(runDeferred.reject);\n\n    return runDeferred.promise;\n  };\n}"]}