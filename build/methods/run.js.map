{"version":3,"sources":["../../src/methods/run.js"],"names":["run","app","runDeferred","useServer","settings","transport","otherSettings","promise","cb","Promise","resolve","then","act","catch","use","cmd","reject"],"mappings":";;;;;kBAQwBA,G;;AARxB;;;;AACA;;;;AACA;;;;;;;;AAEA;;;;AAIe,SAASA,GAAT,CAAaC,GAAb,EAAkB;AAC/B;AACA,MAAIC,oBAAJ;AACA;;;;;AAKA,SAAO,cAAM;AACX,QAAMC,YAAY,CAAC,CAACF,IAAIG,QAAxB;;AADW,eAEsCH,IAAIG,QAAJ,IAAgB,EAFtD;AAAA,8BAEHC,SAFG;AAAA,QAEHA,SAFG,kCAES,MAFT;AAAA,QAEoBC,aAFpB;;AAIX,QAAIJ,WAAJ,EAAiB;AACf,aAAOA,YAAYK,OAAnB;AACD;;AAEDL,kBAAc,qBAAMM,EAAN,CAAd;AACA,QAAID,UAAUE,QAAQC,OAAR,EAAd;;AAEA,QAAIP,SAAJ,EAAe;AACbI,gBAAUA;AACN;AADM,OAELI,IAFK,CAEA;AAAA,eAAMV,IAAIW,GAAJ,CAAQ,EAAEP,oBAAF,EAAR,CAAN;AAAA,OAFA;AAGN;AAHM,OAILQ,KAJK,CAIC;AAAA,eAAMZ,IAAIa,GAAJ,CAAQ,wBAAeR,aAAf,CAAR,CAAN;AAAA,OAJD,CAAV;AAKD;;AAEDC;AACE;AADF,KAEGI,IAFH,CAEQ;AAAA,aAAM,kCAAmBV,GAAnB,CAAN;AAAA,KAFR;AAGE;AAHF,KAIGU,IAJH,CAIQ;AAAA,aAAMR,YACRF,IAAIW,GAAJ,CAAQ,EAAEP,oBAAF,EAAaU,KAAK,QAAlB,EAAR,CADQ,GAERN,QAAQC,OAAR,EAFE;AAAA,KAJR,EAOGC,IAPH,CAOQ,YAAM;AACV,aAAOT,YAAYQ,OAAZ,CAAoBT,GAApB,CAAP;AACD,KATH,EAUGY,KAVH,CAUSX,YAAYc,MAVrB;;AAYA,WAAOd,YAAYK,OAAnB;AACD,GAhCD;AAiCD","file":"run.js","sourcesContent":["import defer from './../utils/defer';\nimport NodeHttpPlugin from './../plugins/node-http';\nimport runInitSubscribers from './../utils/run-init-subscribers';\n\n/**\n * @param {app} app                                 // Экземпляр библиотеки\n * @returns {function:Promise}\n */\nexport default function run(app) {\n  // Ссылка на обещание запуска\n  let runDeferred;\n  /**\n   * @namespace app.run\n   * @param {function} [cb]\n   * @returns {Promise<app>}\n   */\n  return cb => {\n    const useServer = !!app.settings;\n    const { transport = 'http', ...otherSettings } = app.settings || {};\n\n    if (runDeferred) {\n      return runDeferred.promise;\n    }\n\n    runDeferred = defer(cb);\n    let promise = Promise.resolve();\n\n    if (useServer) {\n      promise = promise\n          // Проверяем наличие транспорта для сервера\n          .then(() => app.act({ transport }))\n          // если не найден транспорт - добавим в плагины транспорт по умолчанию\n          .catch(() => app.use(NodeHttpPlugin(otherSettings)));\n    }\n\n    promise\n      // Запустим всех подписчиков на этап инициализации\n      .then(() => runInitSubscribers(app))\n      // Запустим прослушку транспорта для сервера\n      .then(() => useServer\n        ? app.act({ transport, cmd: 'listen' })\n        : Promise.resolve())\n      .then(() => {\n        return runDeferred.resolve(app);\n      })\n      .catch(runDeferred.reject);\n\n    return runDeferred.promise;\n  };\n}"]}