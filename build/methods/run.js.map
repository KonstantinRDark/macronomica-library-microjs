{"version":3,"sources":["../../src/methods/run.js"],"names":["run","app","runDeferred","transports","http","on","type","listen","useServer","settings","transport","otherSettings","promise","cb","Promise","resolve","use","then","catch","reject"],"mappings":";;;;;;;;kBAQwBA,G;;AARxB;;;;AACA;;;;AACA;;;;;;;;AAEA;;;;AAIe,SAASA,GAAT,CAAaC,GAAb,EAAkB;AAC/B;AACA,MAAIC,oBAAJ;AACA,MAAIC,aAAa;AACfC,UAAM;AADS,GAAjB;;AAIAH,MAAII,EAAJ,CAAO,kBAAP,EAA2B,UAACC,IAAD,EAAOC,MAAP;AAAA,WAAkBJ,WAAYG,IAAZ,IAAqBC,MAAvC;AAAA,GAA3B;;AAEA;;;;;AAKA,SAAO,cAAM;AACX,QAAMC,YAAY,CAAC,CAACP,IAAIQ,QAAxB;;AADW,eAEsCR,IAAIQ,QAAJ,IAAgB,EAFtD;AAAA,8BAEHC,SAFG;AAAA,QAEHA,SAFG,kCAES,MAFT;AAAA,QAEoBC,aAFpB;;AAIX,QAAIT,WAAJ,EAAiB;AACf,aAAOA,YAAYU,OAAnB;AACD;;AAEDV,kBAAc,qBAAMW,EAAN,CAAd;AACA,QAAID,UAAUE,QAAQC,OAAR,EAAd;;AAEA;AACA,QAAIP,aAAa,OAAOE,UAAWA,SAAX,CAAP,KAAkC,UAAnD,EAA+D;AAC7D;AACAT,UAAIe,GAAJ,CAAQ,qCAAoBL,aAApB,EAAR;AACD;;AAEDC;AACE;AADF,KAEGK,IAFH,CAEQ;AAAA,aAAM,kCAAmBhB,GAAnB,CAAN;AAAA,KAFR;AAGE;AAHF,KAIGgB,IAJH,CAIQ,YAAM;AACV,UAAG,CAACT,SAAJ,EAAe;AACb,eAAOM,QAAQC,OAAR,EAAP;AACD;;AAED,aAAOZ,WAAYO,SAAZ,GAAP;AACD,KAVH,EAWGO,IAXH,CAWQ;AAAA,aAAMf,YAAYa,OAAZ,CAAoBd,GAApB,CAAN;AAAA,KAXR,EAYGiB,KAZH,CAYShB,YAAYiB,MAZrB;;AAcA,WAAOjB,YAAYU,OAAnB;AACD,GAhCD;AAiCD","file":"run.js","sourcesContent":["import defer from './../utils/defer';\nimport NodeHttpPlugin from './../plugins/node-http';\nimport runInitSubscribers from './../utils/run-init-subscribers';\n\n/**\n * @param {app} app                                 // Экземпляр библиотеки\n * @returns {function:Promise}\n */\nexport default function run(app) {\n  // Ссылка на обещание запуска\n  let runDeferred;\n  let transports = {\n    http: null\n  };\n\n  app.on('plugin.transport', (type, listen) => transports[ type ] = listen);\n\n  /**\n   * @namespace app.run\n   * @param {function} [cb]\n   * @returns {Promise<app>}\n   */\n  return cb => {\n    const useServer = !!app.settings;\n    const { transport = 'http', ...otherSettings } = app.settings || {};\n\n    if (runDeferred) {\n      return runDeferred.promise;\n    }\n\n    runDeferred = defer(cb);\n    let promise = Promise.resolve();\n\n    // Проверяем наличие транспорта для сервера\n    if (useServer && typeof transport[ transport ] !== 'function') {\n      // если не найден транспорт - добавим в плагины транспорт по умолчанию\n      app.use(NodeHttpPlugin({ ...otherSettings }));\n    }\n\n    promise\n      // Запустим всех подписчиков на этап инициализации\n      .then(() => runInitSubscribers(app))\n      // Запустим прослушку транспорта для сервера\n      .then(() => {\n        if(!useServer) {\n          return Promise.resolve();\n        }\n\n        return transports[ transport ]();\n      })\n      .then(() => runDeferred.resolve(app))\n      .catch(runDeferred.reject);\n\n    return runDeferred.promise;\n  };\n}"]}