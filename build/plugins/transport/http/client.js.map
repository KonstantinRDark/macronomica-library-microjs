{"version":3,"sources":["../../../../src/plugins/transport/http/client.js"],"names":["ERROR_CODE_PREFIX","micro","plugin","settings","params","request","options","Promise","resolve","reject","host","prefix","port","url","method","body","JSON","stringify","then","handleSuccess","handleError","_handleError","response","json","status","result","code","message","details","error","e","id","statusText","undefined"],"mappings":";;;;;;;;AAAA;;;;AACA;;;;;;AAQA,IAAMA,oBAAoB,mBAA1B;;kBAEe,UAACC,KAAD,EAAQC,MAAR,EAAgBC,QAAhB,EAA6B;AAC1C,SAAO;AAAA,QAAGC,MAAH,QAAGA,MAAH;AAAA,QAAWC,OAAX,QAAWA,OAAX;AAAA,QAAuBC,OAAvB;;AAAA,WAAqC,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AAAA,UACnEC,IADmE,GAClCP,QADkC,CACnEO,IADmE;AAAA,6BAClCP,QADkC,CAC7DQ,MAD6D;AAAA,UAC7DA,MAD6D;;AAE3E,UAAMC,OAAOT,SAASS,IAAT,SAAqBT,SAASS,IAA9B,GAAwC,EAArD;AACA,UAAMC,kBAAiBH,IAAjB,GAA0BE,IAA1B,GAAmCD,MAAzC;;AAEA,+BAAME,GAAN,eACKP,OADL;AAEEQ,gBAAQ,MAFV;AAGEC,cAAQC,KAAKC,SAAL,CAAeb,MAAf;AAHV,UAKGc,IALH,CAMIC,cAAc,EAAEd,gBAAF,EAAWG,gBAAX,EAAoBC,cAApB,EAAd,CANJ,EAOIW,YAAY,EAAEf,gBAAF,EAAWI,cAAX,EAAZ,CAPJ;AASD,KAd2C,CAArC;AAAA,GAAP;AAeD,C;;AAED,SAASU,aAAT,QAAqD;AAAA,MAA5Bd,OAA4B,SAA5BA,OAA4B;AAAA,MAAnBG,OAAmB,SAAnBA,OAAmB;AAAA,MAAVC,MAAU,SAAVA,MAAU;;AACnD,SAAO,oBAAY;AACjB,QAAMY,eAAeD,YAAY,EAAEf,gBAAF,EAAWI,cAAX,EAAZ,CAArB;;AAEAa,aACGC,IADH,GAEGL,IAFH;AAGI;AACA,gBAAe;AAAA,UAAdK,IAAc,uEAAP,EAAO;;AACb;AADa,UAGwBC,MAHxB,GAKHD,IALG;AAAA,UAIwBE,MAJxB,GAKHF,IALG;;AAOb;;AACA,UAAIC,6CAAJ,EAAwC;AACtC,eAAOhB,QAAQiB,MAAR,CAAP;AACD;;AAED;AACA,UAAID,2CAAJ,EAAsC;AACpC,eAAOH,aAAaI,MAAb,CAAP;AACD;;AAED;AACA,aAAOJ,aAAa;AAClBK,cAAa1B,iBAAb,gCADkB;AAElB2B,sNAFkB;AAGlBC,iBAASL;AAHS,OAAb,CAAP;AAKD,KA3BL;AA4BI;AACAF,gBA7BJ;AA+BD,GAlCD;AAmCD;;AAED,SAASD,WAAT,QAA0C;AAAA,MAAnBf,OAAmB,SAAnBA,OAAmB;AAAA,MAAVI,MAAU,SAAVA,MAAU;;AACxC,SAAO,aAAK;AACV,QAAIoB,cAAJ;;AAEA,YAAQC,EAAEJ,IAAV;AACE;AACA,WAAK,cAAL;AACEG,gBAAQ;AACNH,gBAAa1B,iBAAb,2BADM;AAEN2B,sHAAgCtB,QAAQ0B,EAAxC;AAFM,SAAR;AAIA;AACF;AAASF,gBAAQ;AACfH,gBAASI,EAAEJ,IAAF,IAAUI,EAAEN,MADN;AAEfG,mBAASG,EAAEH,OAAF,IAAaG,EAAEE,UAFT;AAGfJ,mBAASE,EAAEF,OAAF,IAAaK;AAHP,SAAR;AARX;;AAeAxB,WAAOoB,KAAP;AACD,GAnBD;AAoBD","file":"client.js","sourcesContent":["import fetch from 'node-fetch';\nimport {\n  CLIENT_PREFIX,\n  RESPONSE_PROPERTY_STATUS,\n  RESPONSE_PROPERTY_RESULT,\n  RESPONSE_STATUS_SUCCESS,\n  RESPONSE_STATUS_ERROR\n} from './constants';\n\nconst ERROR_CODE_PREFIX = 'error.http.client';\n\nexport default (micro, plugin, settings) => {\n  return ({ params, request, ...options }) => new Promise((resolve, reject) => {\n    const { host, prefix = CLIENT_PREFIX } = settings;\n    const port = settings.port ? `:${ settings.port }` : '';\n    const url = `http://${ host }${ port }${ prefix }`;\n  \n    fetch(url, {\n      ...options,\n      method: 'POST',\n      body  : JSON.stringify(params)\n    })\n      .then(\n        handleSuccess({ request, resolve, reject }),\n        handleError({ request, reject })\n      );\n  });\n};\n\nfunction handleSuccess({ request, resolve, reject }) {\n  return response => {\n    const _handleError = handleError({ request, reject });\n    \n    response\n      .json()\n      .then(\n        // Если ответ корректно распарсился\n        (json = {}) => {\n          // Разберем ответ - данная структура обязательна для клиентских ответов\n          const {\n                  [ RESPONSE_PROPERTY_STATUS ]:status,\n                  [ RESPONSE_PROPERTY_RESULT ]:result\n                } = json;\n        \n          // Если статус результата - успех, то завершим работу вернув результат\n          if (status === RESPONSE_STATUS_SUCCESS) {\n            return resolve(result);\n          }\n        \n          // Если статус результата - ошибка, то вызовем обработчик ошибок\n          if (status === RESPONSE_STATUS_ERROR) {\n            return _handleError(result);\n          }\n        \n          // Если что-то непонятное - вызовем обработчик с ошибкой\n          return _handleError({\n            code   : `${ ERROR_CODE_PREFIX }/unknown.response.structure`,\n            message: `Ответ клиента неизвестной структуры`,\n            details: json\n          });\n        },\n        // Если ошибка парсинга - вызовем обработчик ошибок\n        _handleError\n      );\n  };\n}\n\nfunction handleError({ request, reject }) {\n  return e => {\n    let error;\n    \n    switch (e.code) {\n      // Возникает когда нет сервиса к которому обращаемся\n      case 'ECONNREFUSED':\n        error = {\n          code   : `${ ERROR_CODE_PREFIX }/service.not.available`,\n          message: `Клиент по запросу (${ request.id }) недоступен`\n        };\n        break;\n      default: error = {\n        code   : e.code || e.status,\n        message: e.message || e.statusText,\n        details: e.details || undefined\n      };\n    }\n    \n    reject(error);\n  };\n}"]}