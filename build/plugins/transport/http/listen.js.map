{"version":3,"sources":["../../../../src/plugins/transport/http/listen.js"],"names":["jsonBodyParser","json","urlencodedParser","urlencoded","extended","preprocessors","micro","plugin","type","host","port","includes","handleRequest","req","res","_originalUrl","url","parse","query","pathname","error","code","message","logger","warn","payload","outJson","JSON","stringify","writeHead","Buffer","byteLength","statusMessage","end","method","err","pin","body","transport","origin","headers","time","Date","now","api","act","result","status","server","createServer","on","die","socket","setNoDelay","close","Promise","resolve","reject","info","id","listen"],"mappings":"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","file":"listen.js","sourcesContent":["import http from 'http';\nimport https from 'https';\nimport buffer from 'buffer';\nimport qs from 'qs';\nimport bodyParser from 'body-parser';\nimport url from 'url';\nimport iterate from './../../../utils/iterate';\nimport {\n  SERVER_PREFIX,\n  SERVER_HOST,\n  SERVER_PORT,\n  RESPONSE_PROPERTY_STATUS,\n  RESPONSE_PROPERTY_RESULT,\n  RESPONSE_STATUS_SUCCESS,\n  RESPONSE_STATUS_ERROR\n} from './constants';\n\nconst jsonBodyParser = bodyParser.json();\nconst urlencodedParser = bodyParser.urlencoded({ extended: false });\n\nconst preprocessors = [\n  jsonBodyParser,\n  urlencodedParser\n];\n\nexport default (micro, plugin, { type, host, port }) => {\n  if ([ 'localhost', '0.0.0.0', ].includes(port)) {\n    port = SERVER_PORT;\n  }\n  port = port || SERVER_PORT;\n  host = host || SERVER_HOST;\n\n  function handleRequest(req, res){\n    req._originalUrl = req.url;\n    req.url = url.parse(req.url);\n    req.query = qs.parse(req.url.query);\n\n    if (req.url.pathname !== SERVER_PREFIX) {\n      const error = {\n        code   : 'error.transport.http.listen/url.not.found',\n        message: 'Не корректный маршрут запроса'\n      };\n      micro.logger.warn(error.message, {\n        payload: {\n          code: error.code,\n          url : req._originalUrl\n        }\n      });\n\n      const outJson = JSON.stringify({\n        [ RESPONSE_PROPERTY_STATUS ]: RESPONSE_STATUS_ERROR,\n        [ RESPONSE_PROPERTY_RESULT ]: error\n      });\n\n      res.writeHead(404, {\n        'Content-Type'  : 'application/json',\n        'Cache-Control' : 'private, max-age=0, no-cache, no-store',\n        'Content-Length': buffer.Buffer.byteLength(outJson)\n      });\n      res.statusMessage = 'Not found';\n      return res.end(outJson);\n    }\n\n    iterate(req.method === 'POST' ? preprocessors : [], req, res, (err) => {\n      if (err) {\n        return micro.logger.error(err);\n      }\n      const pin = {\n        ...(req.body || {}),\n        ...req.query,\n        transport: {\n          type,\n          origin: req.headers[ 'user-agent' ],\n          time  : Date.now()\n        }\n      };\n      \n      micro.api.act(pin, (error, result) => {\n        const code = error ? 500 : 200;\n        const status = error ? RESPONSE_STATUS_ERROR : RESPONSE_STATUS_SUCCESS;\n\n        const outJson = JSON.stringify({\n          [ RESPONSE_PROPERTY_STATUS ]: status,\n          [ RESPONSE_PROPERTY_RESULT ]: error || result\n        });\n        res.writeHead(code, {\n          'Content-Type'  : 'application/json',\n          // 'Cache-Control' : 'private, max-age=0, no-cache, no-store',\n          'Content-Length': buffer.Buffer.byteLength(outJson)\n        });\n        // res.statusMessage = 'Not found';\n        res.end(outJson);\n      });\n    });\n  }\n\n  const server = (type === 'https')\n    ? https.createServer(handleRequest)\n    : http.createServer(handleRequest);\n\n  server.on('error', micro.die);\n  server.on('connection', function(socket) {\n    socket.setNoDelay(); // Отключаем алгоритм Нагла.\n  });\n  \n  return {\n    close: () => new Promise((resolve, reject) => {\n      server.close((err) => {\n        if (err && err.message !== 'Not running') {\n          return reject(err);\n        }\n\n        micro.logger.info(`Остановлен сервер по адресу: ${ type }://${ host }:${ port }${ SERVER_PREFIX }`, {\n          id: plugin.id\n        });\n        resolve();\n      });\n    }),\n    listen: () => new Promise((resolve, reject) => {\n\n      server.listen(port || SERVER_PORT, host || SERVER_HOST, (err) => {\n        if (err) {\n          return reject(err);\n        }\n\n        micro.logger.info(`Запущен сервер по адресу: ${ type }://${ host }:${ port }${ SERVER_PREFIX }`, {\n          id: plugin.id\n        });\n\n        resolve();\n      });\n    })\n  };\n};"]}