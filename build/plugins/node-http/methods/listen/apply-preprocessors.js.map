{"version":3,"sources":["../../../../../src/plugins/node-http/methods/listen/apply-preprocessors.js"],"names":["applyPreprocessors","jsonBodyParser","json","urlencodedParser","urlencoded","extended","preprocessors","ERROR_TYPE","PreprocessorsParseError","message","join","EOL","type","code","url","app","req","res","resolve","reject","method","err","error","log"],"mappings":";;;;;;;;;;kBAyBwBA,kB;;AAzBxB;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEA,MAAMC,iBAAiB,qBAAWC,IAAX,EAAvB;AACA,MAAMC,mBAAmB,qBAAWC,UAAX,CAAsB,EAAEC,UAAU,KAAZ,EAAtB,CAAzB;;AAEA,MAAMC,gBAAgB,CACpBL,cADoB,EAEpBE,gBAFoB,CAAtB;;AAKA,MAAMI,aAAa,wBAAnB;;AAEA,MAAMC,0BAA0B,uBAAa;AAC3CC,WAAS,CACP,kEADO,EAEP,wBAFO,EAGPC,IAHO,CAGF,aAAGC,GAHD,CADkC;AAK3CC,QAAO,GAAGL,UAAY,sBALqB;AAM3CM,QAAM,GANqC;AAO3CC,OAAM;AAPqC,CAAb,CAAhC;;AAUe,SAASd,kBAAT,CAA4Be,GAA5B,EAAiCC,GAAjC,EAAsCC,GAAtC,EAA2CH,GAA3C,EAAgD;AAC7D,SAAO,sBAAY,CAACI,OAAD,EAAUC,MAAV,KAAqB;AACtC,2BAAQH,IAAII,MAAJ,KAAe,MAAf,GAAwBd,aAAxB,GAAwC,EAAhD,EAAoDU,GAApD,EAAyDC,GAAzD,EAA+DI,GAAD,IAAS;AACrE,UAAIA,GAAJ,EAAS;AACP,YAAIC,QAAQd,wBAAwBa,GAAxB,EAA6B,EAAEP,GAAF,EAA7B,CAAZ;AACAC,YAAIQ,GAAJ,CAAQD,KAAR,CAAcA,MAAMb,OAApB,EAA6B,EAAEa,KAAF,EAA7B;AACA,eAAOH,OAAOG,KAAP,CAAP;AACD;;AAEDJ;AACD,KARD;AASD,GAVM,CAAP;AAWD","file":"apply-preprocessors.js","sourcesContent":["import WrappedError from 'error/wrapped';\nimport os from 'os';\nimport bodyParser from 'body-parser';\nimport iterate from './../../../../utils/iterate';\n\nconst jsonBodyParser = bodyParser.json();\nconst urlencodedParser = bodyParser.urlencoded({ extended: false });\n\nconst preprocessors = [\n  jsonBodyParser,\n  urlencodedParser\n];\n\nconst ERROR_TYPE = 'micro.plugin.http-node';\n\nconst PreprocessorsParseError = WrappedError({\n  message: [\n    '{name} - ошибка парсисинга препросессора для запроса (url={url})',\n    '{name} - {origMessage}',\n  ].join(os.EOL),\n  type: `${ ERROR_TYPE }.apply.preprocessors`,\n  code: 500,\n  url : null\n});\n\nexport default function applyPreprocessors(app, req, res, url) {\n  return new Promise((resolve, reject) => {\n    iterate(req.method === 'POST' ? preprocessors : [], req, res, (err) => {\n      if (err) {\n        let error = PreprocessorsParseError(err, { url });\n        app.log.error(error.message, { error });\n        return reject(error);\n      }\n\n      resolve();\n    });\n  });\n}"]}