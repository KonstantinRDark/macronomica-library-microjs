{"version":3,"sources":["../../../../../src/plugins/node-http/methods/listen/index.js"],"names":["listenHttp","ERROR_TYPE","InternalError","message","type","app","plugin","onClose","settings","listenHttpRoute","host","port","meta","server","createServer","log","debug","on","handlerError","socket","setNoDelay","err","reject","error"],"mappings":";;;;;;;;;;kBAkBwBA,U;;AAlBxB;;;;AAEA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AAKA,MAAMC,aAAa,wBAAnB;;AAEA,MAAMC,gBAAgB,uBAAa;AACjCC,WAAS,wBADwB;AAEjCC,QAAU,IAAGH,UAAY;AAFQ,CAAb,CAAtB;;AAKe,SAASD,UAAT,CAAoBK,GAApB,EAAyBC,MAAzB,EAAiCC,OAAjC,EAAyD;AAAA,MAAfC,QAAe,uEAAJ,EAAI;;AACtE,SAAO,SAASC,eAAT,GAA2B;AAChC,QAAI;AAAA,2BACiDD,QADjD,CACME,IADN;AAAA,YACMA,IADN;AAAA,2BACiDF,QADjD,CAC0BG,IAD1B;AAAA,YAC0BA,IAD1B;;AAEF,YAAMC,OAAO,EAAEN,QAAQ,EAAEI,IAAF,EAAQC,IAAR,EAAV,EAAb;AACA,YAAME,SAAS,eAAKC,YAAL,CAAkB,6BAAcT,GAAd,EAAmBG,QAAnB,EAA6BI,IAA7B,CAAlB,CAAf;;AAEAP,UAAIU,GAAJ,CAAQC,KAAR,CAAc,wBAAd,EAAwCJ,IAAxC;AACA;AACAC,aAAOI,EAAP,CAAU,OAAV,EAAmBC,aAAab,GAAb,CAAnB;AACA;AACAQ,aAAOI,EAAP,CAAU,YAAV,EAAyBE,MAAD,IAAYA,OAAOC,UAAP,EAApC;;AAEAb,cAAQ,6BAAcM,MAAd,EAAsBR,GAAtB,EAA2BG,QAA3B,EAAqCI,IAArC,CAAR,EAAoD,SAApD;;AAEA,aAAO,8BAAeC,MAAf,EAAuBR,GAAvB,EAA4BG,QAA5B,EAAsCI,IAAtC,CAAP;AACD,KAdD,CAcE,OAAMS,GAAN,EAAW;AACX,aAAO,kBAAQC,MAAR,CAAeJ,aAAab,GAAb,EAAkBgB,GAAlB,CAAf,CAAP;AACD;AACF,GAlBD;AAmBD;;AAED,SAASH,YAAT,CAAsBb,GAAtB,EAA2B;AACzB,SAAOgB,OAAO;AACZ,QAAIE,QAAQrB,cAAcmB,GAAd,CAAZ;AACAhB,QAAIU,GAAJ,CAAQQ,KAAR,CAAcA,MAAMpB,OAApB,EAA6B,EAAEoB,KAAF,EAA7B;AACA,WAAOA,KAAP;AACD,GAJD;AAKD","file":"index.js","sourcesContent":["import WrappedError from 'error/wrapped';\n\nimport http from 'http';\nimport serverOnClose from './server-on-close';\nimport serverOnListen from './server-on-listen';\nimport handleRequest from './handle-request';\nimport {\n  SERVER_HOST,\n  SERVER_PORT\n} from './../../constants';\n\nconst ERROR_TYPE = 'micro.plugin.http-node';\n\nconst InternalError = WrappedError({\n  message: '{name} - {origMessage}',\n  type   : `${ ERROR_TYPE }.internal`\n});\n\nexport default function listenHttp(app, plugin, onClose, settings = {}) {\n  return function listenHttpRoute() {\n    try {\n      const { host = SERVER_HOST, port = SERVER_PORT } = settings;\n      const meta = { plugin: { host, port } };\n      const server = http.createServer(handleRequest(app, settings, meta));\n\n      app.log.debug('Настройки HTTP сервера', meta);\n      // поямаем ошибки сервера\n      server.on('error', handlerError(app));\n      // Отключаем алгоритм Нагла.\n      server.on('connection', (socket) => socket.setNoDelay());\n\n      onClose(serverOnClose(server, app, settings, meta), 'unshift');\n\n      return serverOnListen(server, app, settings, meta);\n    } catch(err) {\n      return Promise.reject(handlerError(app)(err));\n    }\n  };\n}\n\nfunction handlerError(app) {\n  return err => {\n    let error = InternalError(err);\n    app.log.error(error.message, { error });\n    return error;\n  }\n}"]}