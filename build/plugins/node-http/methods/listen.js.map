{"version":3,"sources":["../../../../src/plugins/node-http/methods/listen.js"],"names":["listenHttp","jsonBodyParser","json","urlencodedParser","urlencoded","extended","type","preprocessors","app","plugin","onClose","settings","listenHttpRoute","server","createServer","handleRequest","host","port","log","debug","on","error","socket","setNoDelay","Promise","resolve","reject","close","err","message","info","listen","req","res","_originalUrl","url","parse","query","pathname","warn","code","response404","method","pin","body","transport","origin","headers","time","Date","now","role","act","result","status","outJson","JSON","stringify","writeHead","Buffer","byteLength","end","statusMessage"],"mappings":"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","file":"listen.js","sourcesContent":["import http from 'http';\nimport buffer from 'buffer';\nimport qs from 'qs';\nimport bodyParser from 'body-parser';\nimport url from 'url';\nimport iterate from './../../../utils/iterate';\nimport {\n  SERVER_PREFIX,\n  SERVER_HOST,\n  SERVER_PORT,\n  RESPONSE_PROPERTY_STATUS,\n  RESPONSE_PROPERTY_RESULT,\n  RESPONSE_STATUS_SUCCESS,\n  RESPONSE_STATUS_ERROR\n} from './../constants';\n\nconst jsonBodyParser = bodyParser.json();\nconst urlencodedParser = bodyParser.urlencoded({ extended: false });\nconst type = 'http';\n\nconst preprocessors = [\n  jsonBodyParser,\n  urlencodedParser\n];\n\nexport default function listenHttp(app, plugin, onClose, settings = {}) {\n  return function listenHttpRoute() {\n    const server = http.createServer(handleRequest);\n    const { host = SERVER_HOST, port = SERVER_PORT } = settings;\n\n    app.log.debug('Настройки HTTP сервера', settings);\n    server.on('error', app.log.error);\n    server.on('connection', function(socket) {\n      socket.setNoDelay(); // Отключаем алгоритм Нагла.\n    });\n\n    onClose(() => new Promise((resolve, reject) => {\n      server.close((err) => {\n        if (err && err.message !== 'Not running') {\n          return reject(err);\n        }\n        app.log.info('Остановлен Node Http сервер', { plugin: { host, port } });\n        resolve();\n      });\n    }), 'unshift');\n\n    return new Promise((resolve, reject) => {\n      server.listen(port, host, (err) => {\n        if (err) {\n          return reject(err);\n        }\n        app.log.info('Запущен Node Http сервер', { plugin: { host, port } });\n        resolve();\n      });\n    });\n\n    function handleRequest(req, res){\n      req._originalUrl = req.url;\n      req.url = url.parse(req.url);\n      req.query = qs.parse(req.url.query);\n\n      if (req.url.pathname !== SERVER_PREFIX) {\n        app.log.warn({\n          code   : 'error.transport.http.listen/url.not.found',\n          message: 'Не корректный маршрут запроса'\n        });\n\n        return response404(res, 'error.transport.http.listen/url.not.found');\n      }\n\n      iterate(req.method === 'POST' ? preprocessors : [], req, res, (err) => {\n        if (err) {\n          app.log.error(err);\n          return response404(res, 'error.transport.http.listen/preprocessors.parse');\n        }\n        const pin = {\n          ...(req.body || {}),\n          ...req.query,\n          transport: {\n            type,\n            origin: req.headers[ 'user-agent' ],\n            time  : Date.now()\n          }\n        };\n\n        if (pin.role === 'plugin') {\n          app.log.warn(`Вызов приватного метода`, pin);\n          return response404(res, {});\n        }\n\n        app.act(pin, (error, result) => {\n          const code = error ? 500 : 200;\n          const status = error ? RESPONSE_STATUS_ERROR : RESPONSE_STATUS_SUCCESS;\n\n          const outJson = JSON.stringify({\n            [ RESPONSE_PROPERTY_STATUS ]: status,\n            [ RESPONSE_PROPERTY_RESULT ]: error || result\n          });\n\n          res.writeHead(code, {\n            'Content-Type'  : 'application/json',\n            // 'Cache-Control' : 'private, max-age=0, no-cache, no-store',\n            'Content-Length': buffer.Buffer.byteLength(outJson)\n          });\n\n          res.end(outJson);\n        });\n      });\n    }\n  };\n}\n\nfunction response404(res, result) {\n  const json = JSON.stringify({\n    [ RESPONSE_PROPERTY_STATUS ]: RESPONSE_STATUS_ERROR,\n    [ RESPONSE_PROPERTY_RESULT ]: result\n  });\n\n  res.writeHead(404, {\n    'Content-Type'  : 'application/json',\n    'Cache-Control' : 'private, max-age=0, no-cache, no-store',\n    'Content-Length': buffer.Buffer.byteLength(json)\n  });\n\n  res.statusMessage = 'Not found';\n}"]}