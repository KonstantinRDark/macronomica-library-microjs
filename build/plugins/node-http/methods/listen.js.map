{"version":3,"sources":["../../../../src/plugins/node-http/methods/listen.js"],"names":["listenHttp","jsonBodyParser","json","urlencodedParser","urlencoded","extended","type","preprocessors","micro","plugin","onClose","host","port","includes","server","createServer","handleRequest","on","die","socket","setNoDelay","Promise","resolve","reject","close","err","message","listen","req","res","_originalUrl","url","parse","query","pathname","error","code","outJson","JSON","stringify","writeHead","Buffer","byteLength","statusMessage","end","method","logger","pin","body","transport","origin","headers","time","Date","now","act","result","status"],"mappings":"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","file":"listen.js","sourcesContent":["import http from 'http';\nimport buffer from 'buffer';\nimport qs from 'qs';\nimport bodyParser from 'body-parser';\nimport url from 'url';\nimport iterate from './../../../utils/iterate';\nimport {\n  SERVER_PREFIX,\n  SERVER_HOST,\n  SERVER_PORT,\n  RESPONSE_PROPERTY_STATUS,\n  RESPONSE_PROPERTY_RESULT,\n  RESPONSE_STATUS_SUCCESS,\n  RESPONSE_STATUS_ERROR\n} from './../constants';\n\nconst jsonBodyParser = bodyParser.json();\nconst urlencodedParser = bodyParser.urlencoded({ extended: false });\nconst type = 'http';\n\nconst preprocessors = [\n  jsonBodyParser,\n  urlencodedParser\n];\n\nexport default function listenHttp(micro, plugin, onClose, { host = SERVER_HOST, port }) {\n  return () => {\n    if ([ 'localhost', '0.0.0.0', ].includes(port)) {\n      port = SERVER_PORT;\n    }\n    port = port || SERVER_PORT;\n\n    const server = http.createServer(handleRequest);\n\n    server.on('error', micro.die);\n    server.on('connection', function(socket) {\n      socket.setNoDelay(); // Отключаем алгоритм Нагла.\n    });\n\n    onClose(() => new Promise((resolve, reject) => {\n      server.close((err) => {\n        if (err && err.message !== 'Not running') {\n          return reject(err);\n        }\n\n        resolve();\n      });\n    }));\n\n    return new Promise((resolve, reject) => {\n      server.listen(port, host, (err) => {\n        if (err) {\n          return reject(err);\n        }\n\n        resolve();\n      });\n    });\n\n    function handleRequest(req, res){\n      req._originalUrl = req.url;\n      req.url = url.parse(req.url);\n      req.query = qs.parse(req.url.query);\n\n      if (req.url.pathname !== SERVER_PREFIX) {\n        const error = {\n          code   : 'error.transport.http.listen/url.not.found',\n          message: 'Не корректный маршрут запроса'\n        };\n\n        const outJson = JSON.stringify({\n          [ RESPONSE_PROPERTY_STATUS ]: RESPONSE_STATUS_ERROR,\n          [ RESPONSE_PROPERTY_RESULT ]: error\n        });\n\n        res.writeHead(404, {\n          'Content-Type'  : 'application/json',\n          'Cache-Control' : 'private, max-age=0, no-cache, no-store',\n          'Content-Length': buffer.Buffer.byteLength(outJson)\n        });\n        res.statusMessage = 'Not found';\n        return res.end(outJson);\n      }\n\n      iterate(req.method === 'POST' ? preprocessors : [], req, res, (err) => {\n        if (err) {\n          return micro.logger.error(err);\n        }\n        const pin = {\n          ...(req.body || {}),\n          ...req.query,\n          transport: {\n            type,\n            origin: req.headers[ 'user-agent' ],\n            time  : Date.now()\n          }\n        };\n\n        micro.act(pin, (error, result) => {\n          const code = error ? 500 : 200;\n          const status = error ? RESPONSE_STATUS_ERROR : RESPONSE_STATUS_SUCCESS;\n\n          const outJson = JSON.stringify({\n            [ RESPONSE_PROPERTY_STATUS ]: status,\n            [ RESPONSE_PROPERTY_RESULT ]: error || result\n          });\n\n          res.writeHead(code, {\n            'Content-Type'  : 'application/json',\n            // 'Cache-Control' : 'private, max-age=0, no-cache, no-store',\n            'Content-Length': buffer.Buffer.byteLength(outJson)\n          });\n\n          res.end(outJson);\n        });\n      });\n    }\n  };\n}\n\n"]}