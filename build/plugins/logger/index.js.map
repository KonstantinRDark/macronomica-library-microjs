{"version":3,"sources":["../../../src/plugins/logger/index.js"],"names":["name","level","loggers","add","transports","Console","colorize","label","timestamp","Date","now","formatter","message","options","appId","micro","id","hasMeta","meta","Object","keys","length","when","undefined","format","toUpperCase","actionId","action","output","push","payload","error","time","hideParams","join","str","indexOf","replace"],"mappings":";;;;;;AAAA;;;;AACA;;AACA;;;;;;;;kBAEe;AAAA,iFAAuC,EAAvC;AAAA,uBAAGA,IAAH;AAAA,MAAGA,IAAH,6BAAU,OAAV;AAAA,wBAAmBC,KAAnB;AAAA,MAAmBA,KAAnB,8BAA2B,OAA3B;;AAAA,SAA8C,iBAAS;AACpE,WAAO,kBAAQC,OAAR,CAAgBC,GAAhB,CAAoBH,IAApB,EAA0B;AAC/BI,kBAAY,CACV,IAAK,kBAAQA,UAAR,CAAmBC,OAAxB,CAAiC;AAC/BJ,oBAD+B;AAE/BK,kBAAW,IAFoB;AAG/BC,eAAWP,IAHoB;AAI/BQ,mBAAW;AAAA,iBAAMC,KAAKC,GAAL,EAAN;AAAA,SAJoB;AAK/BC,mBAAW,qBAA8C;AAAA,0FAAJ,EAAI;AAAA,cAAnCV,KAAmC,SAAnCA,KAAmC;AAAA,cAA5BW,OAA4B,SAA5BA,OAA4B;AAAA,cAAhBC,OAAgB;;AACvD,cAAMC,QAAQC,MAAMC,EAApB;AACA,cAAMC,UAAUJ,QAAQK,IAAR,IAAgBC,OAAOC,IAAP,CAAYP,QAAQK,IAApB,EAA0BG,MAA1D;AACA,cAAMC,OAAQL,WAAWJ,QAAQK,IAAR,CAAaI,IAAxB,GAA+BT,QAAQK,IAAR,CAAaI,IAA5C,GAAmDT,QAAQL,SAAR,EAAjE;;AAEA,cAAIe,cAAcX,OAAd,IAAyB,CAACK,OAA9B,EAAuC;AACrC,mBAAOL,OAAP;AACD;;AAED,cAAMY,SAAS,cACD,6BAAcF,IAAd,CADC,oBAERrB,MAAMwB,WAAN,EAFQ,OAAf;;AAKA,cAAIR,OAAJ,EAAa;AAAA,gCACoBJ,QAAQK,IAD5B;AAAA,gBACLQ,QADK,iBACLA,QADK;AAAA,gBACKV,EADL,iBACKA,EADL;AAAA,gBACSW,MADT,iBACSA,MADT;;AAEX,gBAAIC,sBAAqBd,KAAzB;;AAEA,gBAAIY,QAAJ,EAAcE,iBAAgBF,QAAhB;AACdE,sBAAU,SAAV;;AAEA,gBAAIZ,EAAJ,EAAQY,iBAAgBZ,EAAhB;AACR,gBAAIW,MAAJ,EAAYC,gBAAeD,MAAf;;AAEZH,mBAAOK,IAAP,CAAYD,MAAZ;AACD;;AAED,cAAIL,cAAcX,OAAlB,EAA2B;AACzBY,mBAAOK,IAAP,CAAYjB,OAAZ;AACD;;AAED,cAAIK,OAAJ,EAAa;AAAA,iCACsBJ,QAAQK,IAD9B;AAAA,gBACHY,OADG,kBACHA,OADG;AAAA,gBACMC,KADN,kBACMA,KADN;AAAA,gBACaC,IADb,kBACaA,IADb;;AAEX,gBAAID,SAASD,OAAb,EAAsBN,OAAOK,IAAP,CAAYI,WAAW,uBAAUF,SAASD,OAAnB,CAAX,CAAZ;AACtB,gBAAIE,IAAJ,EAAUR,OAAOK,IAAP,CAAY,uBAAUG,IAAV,CAAZ;AACX;;AAED;AACA,sBAAWC,WAAWT,OAAOU,IAAP,CAAY,IAAZ,CAAX,CAAX;AACD;AA5C8B,OAAjC,CADU;AADmB,KAA1B,CAAP;AAkDD,GAnDc;AAAA,C;;AAqDf,SAASD,UAAT,CAAoBE,GAApB,EAAyB;AACvB,MAAI,CAAC,CAACA,GAAF,IAAS,CAAC,CAACA,IAAIC,OAAf,IAA0B,CAAC,CAAC,CAACD,IAAIC,OAAJ,CAAY,UAAZ,CAAjC,EAA0D;AACxD,WAAOD,IACJE,OADI,CACI,wBADJ,EAC8B,gBAD9B,EAEJA,OAFI,CAEI,yBAFJ,EAE+B,iBAF/B,EAGJA,OAHI,CAGI,wBAHJ,EAG8B,gBAH9B,CAAP;AAID;;AAED,SAAOF,GAAP;AACD","file":"index.js","sourcesContent":["import winston from 'winston';\nimport { serialize } from 'winston/lib/winston/common';\nimport dateIsoString from './../../utils/date-iso-string';\n\nexport default ({ name = 'micro', level = 'silly' } = {}) => micro => {\n  return winston.loggers.add(name, {\n    transports: [\n      new (winston.transports.Console)({\n        level,\n        colorize : true,\n        label    : name,\n        timestamp: () => Date.now(),\n        formatter: function({ level, message, ...options } = {}) {\n          const appId = micro.id;\n          const hasMeta = options.meta && Object.keys(options.meta).length;\n          const when  = hasMeta && options.meta.when ? options.meta.when : options.timestamp();\n          \n          if (undefined !== message && !hasMeta) {\n            return message;\n          }\n\n          const format = [\n            `\\x1b[90m${ dateIsoString(when) }\\x1b[0m`,\n            `[${ level.toUpperCase() }]`\n          ];\n\n          if (hasMeta) {\n            let { actionId, id, action } = options.meta;\n            let output = `\\x1b[90m${ appId }`;\n\n            if (actionId) output += ` (${ actionId })`;\n            output += '\\x1b[0m';\n  \n            if (id) output += ` (${ id })`;\n            if (action) output += ` ${ action }`;\n\n            format.push(output)\n          }\n\n          if (undefined !== message) {\n            format.push(message);\n          }\n\n          if (hasMeta) {\n            const { payload, error, time } = options.meta;\n            if (error || payload) format.push(hideParams(serialize(error || payload)));\n            if (time) format.push(serialize(time));\n          }\n\n          // Return string will be passed to logger.\n          return `${ hideParams(format.join('\\t')) }`;\n        }\n      })\n    ]\n  });\n};\n\nfunction hideParams(str) {\n  if (!!str && !!str.indexOf && !!~str.indexOf('password')) {\n    return str\n      .replace(/(password:.[^,|\\s]+)/gi, 'password=*****')\n      .replace(/(password]=.[^,|\\s]+)/gi, 'password]=*****')\n      .replace(/(password=.[^,|\\s]+)/gi, 'password=*****')\n  }\n  \n  return str;\n}"]}