{"version":3,"sources":["../../../../src/plugins/api-fetch/methods/fetch.js"],"names":["fetch","PREFIX_LOG","InternalError","message","join","type","url","request","ServiceNotAvailableError","ParseResponseError","TimeoutError","timeout","code","app","name","settings","headers","outerHeaders","prefix","ssh","agent","log","trace","username","host","port","debug","on","error","route","api","transport","msg","body","meta","useAgent","origin","getSignTransport","getSignRequest","options","method","duration","then","handleSuccess","handleError","e","sign","time","response","resolve","reject","json","status","result","info","id","erropt","Error"],"mappings":"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","file":"fetch.js","sourcesContent":["import WrappedError from 'error/wrapped';\nimport TypedError from 'error/typed';\nimport jwt from 'jsonwebtoken';\nimport middleware from 'node-fetch';\nimport { clear } from './../../../utils/make-request';\nimport {\n  API_TIMEOUT,\n  CLIENT_SECRET,\n  CLIENT_TRANSPORT_HEADER,\n  CLIENT_REQUEST_HEADER,\n  CLIENT_PREFIX,\n  CLIENT_CONTENT_TYPE,\n  RESPONSE_PROPERTY_STATUS,\n  RESPONSE_PROPERTY_RESULT,\n  RESPONSE_STATUS_SUCCESS\n} from './../constants';\n\nconst PREFIX_LOG = 'micro.plugins.fetch';\n\nconst InternalError = WrappedError({\n  message: [\n    '{name}: Внутренняя ошибка по запросу [{request}]{url}',\n    '{name}: {origMessage}',\n  ].join('\\n'),\n  type   : `${ PREFIX_LOG }.internal`,\n  url    : null,\n  request: null\n});\n\nconst ServiceNotAvailableError = WrappedError({\n  message: [\n    '{name}: Сервис недоступен по запросу [{request}]{url}',\n    '{name}: {origMessage}',\n  ].join('\\n'),\n  type   : `${ PREFIX_LOG }.service.not.available`,\n  url    : null,\n  request: null\n});\n\nconst ParseResponseError = WrappedError({\n  message: [\n    '{name}: Ошибка парсинга ответа по запросу [{request}]{url}',\n    '{name}: {origMessage}',\n  ].join('\\n'),\n  type   : `${ PREFIX_LOG }.parse.response`,\n  url    : null,\n  request: null\n});\n\nconst TimeoutError = TypedError({\n  message: '{name}: Превышено время ожидания (timeout={timeout}) запроса [{request}]{url}',\n  type   : `${ PREFIX_LOG }.timeout`,\n  timeout: API_TIMEOUT,\n  code   : 504\n});\n\nexport default function fetch(app, { name, settings }) {\n  let {\n    url,\n    headers:outerHeaders = {},\n    prefix = CLIENT_PREFIX,\n    ssh,\n    agent\n  } = settings;\n\n  if (agent) {\n    app.log.trace(`Используется SSH TUNNEL: ${ ssh.username }@${ ssh.host }:${ ssh.port }`);\n    app.log.debug('Настройки SSH TUNNEL:', ssh);\n    agent.on('error', error => app.log.error(WrappedError({\n      message: '{name}: {origMessage}',\n      type   : 'micro.plugin.fetch.ssh.internal'\n    })(error)));\n  }\n\n  return (request, route) => {\n    const { api, transport, ...msg } = request;\n    const body = clear(msg);\n    const meta = {\n      api,\n      transport,\n      request : request.request,\n      useAgent: !!agent\n    };\n    const headers = {\n      'Content-Type': CLIENT_CONTENT_TYPE,\n      'Referer'     : app.name,\n      'User-Agent'  : transport.origin,\n      ...outerHeaders,\n\n      [ CLIENT_TRANSPORT_HEADER ]: getSignTransport(transport),\n      [ CLIENT_REQUEST_HEADER ]  : getSignRequest(meta.request)\n    };\n    const options = {\n      agent,\n      headers,\n      method : 'POST',\n      timeout: API_TIMEOUT,\n      body   : JSON.stringify(body)\n    };\n    request.duration();\n    request.log.trace(`${ PREFIX_LOG }.in`, { body, ...meta });\n\n    try {\n      return middleware(url + prefix, options).then(\n        handleSuccess(request, meta),\n        handleError(request, meta)\n      );\n    } catch (e) {\n      return handleError(request, meta)(e);\n    }\n  };\n}\n\nfunction getSignTransport({ ...transport } = {}) {\n  return jwt.sign({ transport: { ...transport } }, CLIENT_SECRET);\n}\n\nfunction getSignRequest({ time, ...request } = {}) {\n  return jwt.sign({ request: { ...request } }, CLIENT_SECRET);\n}\n\nfunction handleSuccess(request, meta) {\n  return response => new Promise(async (resolve, reject) => {\n    try {\n      const json = await response.json();\n\n      // Если ответ корректно распарсился\n      // Разберем ответ - данная структура обязательна для клиентских ответов\n      const {\n        [ RESPONSE_PROPERTY_STATUS ]:status,\n        [ RESPONSE_PROPERTY_RESULT ]:result\n      } = (json || {});\n\n      // Если статус результата - успех, то завершим работу вернув результат\n      if (status === RESPONSE_STATUS_SUCCESS) {\n        request.duration();\n        request.log.info(`${ PREFIX_LOG }`, meta);\n        return resolve(result);\n      }\n\n      // Если статус результата - ошибка, то вызовем обработчик ошибок\n      return reject(result);\n    } catch (e) {\n      // Если ошибка парсинга - вызовем обработчик ошибок\n      const { url } = meta;\n      const error = ParseResponseError(e, { url, request: request.request.id });\n\n      request.duration();\n      request.log.error(error.message, { error, ...meta });\n      return reject(result);\n    }\n  });\n}\n\nfunction handleError(request, meta) {\n  return e => new Promise((resolve, reject) => {\n    const erropt = { url: meta.url, request: request.request.id };\n    let error;\n\n    if (e.name === 'FetchError') {\n      switch (e.type) {\n        // Возникает при таймауте запроса\n        case 'request-timeout': error = TimeoutError(erropt); break;\n        default: error = InternalError(new Error(e.message), erropt);\n      }\n    } else {\n      switch (e.code) {\n        // Возникает когда нет сервиса к которому обращаемся\n        case 'ECONNREFUSED': error = ServiceNotAvailableError(e, erropt);\n          break;\n        default: error = InternalError(e, erropt);\n      }\n    }\n    request.duration();\n    request.log.error(error.message, meta);\n    reject(error);\n  });\n}"]}