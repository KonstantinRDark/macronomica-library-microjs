{"version":3,"sources":["../../../../src/plugins/api-fetch/methods/fetch.js"],"names":["fetch","ERROR_CODE_PREFIX","microjs","name","settings","request","route","Promise","resolve","reject","api","headers","msg","host","prefix","port","method","body","JSON","stringify","then","handleSuccess","handleError","response","_handleError","json","status","result","code","message","details","e","error","id","statusText","undefined"],"mappings":";;;;;;;;kBAYwBA,K;;AAZxB;;;;AACA;;;;;;AASA,MAAMC,oBAAoB,mBAA1B;;AAEe,SAASD,KAAT,CAAeE,OAAf,QAA+C;AAAA,MAArBC,IAAqB,QAArBA,IAAqB;AAAA,MAAZC,QAAY;;AAC5D,SAAO,CAACC,OAAD,EAAUC,KAAV,KAAoB,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AAAA,UAClDC,GADkD,GACpBL,OADoB,CAClDK,GADkD;AAAA,2BACpBL,OADoB,CAC7CM,OAD6C;;AAAA,UAC7CA,OAD6C,oCACnC,EADmC;AAAA,UAC5BC,GAD4B,4BACpBP,OADoB;;AAAA,UAElDQ,IAFkD,GAEjBT,QAFiB,CAElDS,IAFkD;AAAA,2BAEjBT,QAFiB,CAE5CU,MAF4C;AAAA,UAE5CA,MAF4C;;AAG1D,UAAMC,OAAOX,SAASW,IAAT,GAAiB,KAAIX,SAASW,IAAM,GAApC,GAAwC,EAArD;AACA,UAAMC,SAAS,MAAf;;AAEA,6BAAY,WAAUH,IAAM,KAAGE,IAAM,KAAGD,MAAQ,GAAhD,EAAmD;AACjDE,YADiD;AAEjDL,0BAAW,8CAAX,IAAmDA,OAAnD,CAFiD;AAGjDM,YAASC,KAAKC,SAAL,CAAeP,GAAf;AAHwC,KAAnD,EAKGQ,IALH,CAMIC,cAAc,EAAEhB,OAAF,EAAWG,OAAX,EAAoBC,MAApB,EAAd,CANJ,EAOIa,YAAY,EAAEjB,OAAF,EAAWI,MAAX,EAAZ,CAPJ;AASD,GAf0B,CAA3B;AAgBD;;AAED,SAASY,aAAT,QAAqD;AAAA,MAA5BhB,OAA4B,SAA5BA,OAA4B;AAAA,MAAnBG,OAAmB,SAAnBA,OAAmB;AAAA,MAAVC,MAAU,SAAVA,MAAU;;AACnD,SAAOc,YAAY;AACjB,UAAMC,eAAeF,YAAY,EAAEjB,OAAF,EAAWI,MAAX,EAAZ,CAArB;;AAEAc,aACGE,IADH,GAEGL,IAFH;AAGI;AACA,gBAAe;AAAA,UAAdK,IAAc,uEAAP,EAAO;;AACb;AADa,YAGkBC,MAHlB,GAKTD,IALS;AAAA,YAIkBE,MAJlB,GAKTF,IALS;;AAOb;;AACA,UAAIC,6CAAJ,EAAwC;AACtC,eAAOlB,QAAQmB,MAAR,CAAP;AACD;;AAED;AACA,UAAID,2CAAJ,EAAsC;AACpC,eAAOF,aAAaG,MAAb,CAAP;AACD;;AAED;AACA,aAAOH,aAAa;AAClBI,cAAU,IAAG3B,iBAAmB,8BADd;AAElB4B,iBAAU,qCAFQ;AAGlBC,iBAASL;AAHS,OAAb,CAAP;AAKD,KA3BL;AA4BI;AACAD,gBA7BJ;AA+BD,GAlCD;AAmCD;;AAED,SAASF,WAAT,QAA0C;AAAA,MAAnBjB,OAAmB,SAAnBA,OAAmB;AAAA,MAAVI,MAAU,SAAVA,MAAU;;AACxC,SAAOsB,KAAK;AACV,QAAIC,KAAJ;;AAEA,YAAQD,EAAEH,IAAV;AACE;AACA,WAAK,cAAL;AACEI,gBAAQ;AACNJ,gBAAU,IAAG3B,iBAAmB,yBAD1B;AAEN4B,mBAAU,uBAAsBxB,QAAQ4B,EAAI;AAFtC,SAAR;AAIA;AACF;AAASD,gBAAQ;AACfJ,gBAASG,EAAEH,IAAF,IAAUG,EAAEL,MADN;AAEfG,mBAASE,EAAEF,OAAF,IAAaE,EAAEG,UAFT;AAGfJ,mBAASC,EAAED,OAAF,IAAaK;AAHP,SAAR;AARX;;AAeA1B,WAAOuB,KAAP;AACD,GAnBD;AAoBD","file":"fetch.js","sourcesContent":["import middleware from 'node-fetch';\nimport {\n  CLIENT_PREFIX,\n  CLIENT_CONTENT_TYPE,\n  RESPONSE_PROPERTY_STATUS,\n  RESPONSE_PROPERTY_RESULT,\n  RESPONSE_STATUS_SUCCESS,\n  RESPONSE_STATUS_ERROR\n} from './../constants';\n\nconst ERROR_CODE_PREFIX = 'error.http.client';\n\nexport default function fetch(microjs, { name, ...settings }) {\n  return (request, route) => new Promise((resolve, reject) => {\n    const { api, headers = {}, ...msg } = request;\n    const { host, prefix = CLIENT_PREFIX } = settings;\n    const port = settings.port ? `:${ settings.port }` : '';\n    const method = 'POST';\n\n    middleware(`http://${ host }${ port }${ prefix }`, {\n      method,\n      headers: { 'Content-Type': CLIENT_CONTENT_TYPE, ...headers },\n      body   : JSON.stringify(msg)\n    })\n      .then(\n        handleSuccess({ request, resolve, reject }),\n        handleError({ request, reject })\n      );\n  });\n}\n\nfunction handleSuccess({ request, resolve, reject }) {\n  return response => {\n    const _handleError = handleError({ request, reject });\n\n    response\n      .json()\n      .then(\n        // Если ответ корректно распарсился\n        (json = {}) => {\n          // Разберем ответ - данная структура обязательна для клиентских ответов\n          const {\n            [ RESPONSE_PROPERTY_STATUS ]:status,\n            [ RESPONSE_PROPERTY_RESULT ]:result\n          } = json;\n\n          // Если статус результата - успех, то завершим работу вернув результат\n          if (status === RESPONSE_STATUS_SUCCESS) {\n            return resolve(result);\n          }\n\n          // Если статус результата - ошибка, то вызовем обработчик ошибок\n          if (status === RESPONSE_STATUS_ERROR) {\n            return _handleError(result);\n          }\n\n          // Если что-то непонятное - вызовем обработчик с ошибкой\n          return _handleError({\n            code   : `${ ERROR_CODE_PREFIX }/unknown.response.structure`,\n            message: `Ответ клиента неизвестной структуры`,\n            details: json\n          });\n        },\n        // Если ошибка парсинга - вызовем обработчик ошибок\n        _handleError\n      );\n  };\n}\n\nfunction handleError({ request, reject }) {\n  return e => {\n    let error;\n\n    switch (e.code) {\n      // Возникает когда нет сервиса к которому обращаемся\n      case 'ECONNREFUSED':\n        error = {\n          code   : `${ ERROR_CODE_PREFIX }/service.not.available`,\n          message: `Клиент по запросу (${ request.id }) недоступен`\n        };\n        break;\n      default: error = {\n        code   : e.code || e.status,\n        message: e.message || e.statusText,\n        details: e.details || undefined\n      };\n    }\n\n    reject(error);\n  };\n}"]}