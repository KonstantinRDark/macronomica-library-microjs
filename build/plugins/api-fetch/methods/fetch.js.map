{"version":3,"sources":["../../../../src/plugins/api-fetch/methods/fetch.js"],"names":["fetch","ERROR_CODE_PREFIX","microjs","name","settings","route","api","headers","msg","Promise","resolve","reject","host","prefix","port","method","body","JSON","stringify","then","handleSuccess","request","handleError","_handleError","response","json","status","result","code","message","details","error","e","id","statusText","undefined"],"mappings":";;;;;;;;kBAYwBA,K;;AAZxB;;;;AACA;;;;;;AASA,IAAMC,oBAAoB,mBAA1B;;AAEe,SAASD,KAAT,CAAeE,OAAf,QAA+C;AAAA,MAArBC,IAAqB,QAArBA,IAAqB;AAAA,MAAZC,QAAY;;AAC5D,SAAO,iBAAgCC,KAAhC;AAAA,QAAGC,GAAH,SAAGA,GAAH;AAAA,8BAAQC,OAAR;AAAA,QAAQA,OAAR,iCAAkB,EAAlB;AAAA,QAAyBC,GAAzB;;AAAA,WAA0C,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AAAA,UACxEC,IADwE,GACvCR,QADuC,CACxEQ,IADwE;AAAA,6BACvCR,QADuC,CAClES,MADkE;AAAA,UAClEA,MADkE;;AAEhF,UAAMC,OAAOV,SAASU,IAAT,SAAqBV,SAASU,IAA9B,GAAwC,EAArD;AACA,UAAMC,SAAS,MAAf;;AAEA,2CAAsBH,IAAtB,GAA+BE,IAA/B,GAAwCD,MAAxC,EAAmD;AACjDE,sBADiD;AAEjDR,4BAAW,8CAAX,IAAmDA,OAAnD,CAFiD;AAGjDS,cAASC,KAAKC,SAAL,CAAeV,GAAf;AAHwC,OAAnD,EAKGW,IALH,CAMIC,cAAc,EAAEC,gBAAF,EAAWX,gBAAX,EAAoBC,cAApB,EAAd,CANJ,EAOIW,YAAY,EAAED,gBAAF,EAAWV,cAAX,EAAZ,CAPJ;AASD,KAdgD,CAA1C;AAAA,GAAP;AAeD;;AAED,SAASS,aAAT,QAAqD;AAAA,MAA5BC,OAA4B,SAA5BA,OAA4B;AAAA,MAAnBX,OAAmB,SAAnBA,OAAmB;AAAA,MAAVC,MAAU,SAAVA,MAAU;;AACnD,SAAO,oBAAY;AACjB,QAAMY,eAAeD,YAAY,EAAED,gBAAF,EAAWV,cAAX,EAAZ,CAArB;;AAEAa,aACGC,IADH,GAEGN,IAFH;AAGI;AACA,gBAAe;AAAA,UAAdM,IAAc,uEAAP,EAAO;;AACb;AADa,UAGkBC,MAHlB,GAKTD,IALS;AAAA,UAIkBE,MAJlB,GAKTF,IALS;;AAOb;;AACA,UAAIC,6CAAJ,EAAwC;AACtC,eAAOhB,QAAQiB,MAAR,CAAP;AACD;;AAED;AACA,UAAID,2CAAJ,EAAsC;AACpC,eAAOH,aAAaI,MAAb,CAAP;AACD;;AAED;AACA,aAAOJ,aAAa;AAClBK,cAAa3B,iBAAb,gCADkB;AAElB4B,sNAFkB;AAGlBC,iBAASL;AAHS,OAAb,CAAP;AAKD,KA3BL;AA4BI;AACAF,gBA7BJ;AA+BD,GAlCD;AAmCD;;AAED,SAASD,WAAT,QAA0C;AAAA,MAAnBD,OAAmB,SAAnBA,OAAmB;AAAA,MAAVV,MAAU,SAAVA,MAAU;;AACxC,SAAO,aAAK;AACV,QAAIoB,cAAJ;;AAEA,YAAQC,EAAEJ,IAAV;AACE;AACA,WAAK,cAAL;AACEG,gBAAQ;AACNH,gBAAa3B,iBAAb,2BADM;AAEN4B,sHAAgCR,QAAQY,EAAxC;AAFM,SAAR;AAIA;AACF;AAASF,gBAAQ;AACfH,gBAASI,EAAEJ,IAAF,IAAUI,EAAEN,MADN;AAEfG,mBAASG,EAAEH,OAAF,IAAaG,EAAEE,UAFT;AAGfJ,mBAASE,EAAEF,OAAF,IAAaK;AAHP,SAAR;AARX;;AAeAxB,WAAOoB,KAAP;AACD,GAnBD;AAoBD","file":"fetch.js","sourcesContent":["import middleware from 'node-fetch';\nimport {\n  CLIENT_PREFIX,\n  CLIENT_CONTENT_TYPE,\n  RESPONSE_PROPERTY_STATUS,\n  RESPONSE_PROPERTY_RESULT,\n  RESPONSE_STATUS_SUCCESS,\n  RESPONSE_STATUS_ERROR\n} from './../constants';\n\nconst ERROR_CODE_PREFIX = 'error.http.client';\n\nexport default function fetch(microjs, { name, ...settings }) {\n  return ({ api, headers = {}, ...msg }, route) => new Promise((resolve, reject) => {\n    const { host, prefix = CLIENT_PREFIX } = settings;\n    const port = settings.port ? `:${ settings.port }` : '';\n    const method = 'POST';\n\n    middleware(`http://${ host }${ port }${ prefix }`, {\n      method,\n      headers: { 'Content-Type': CLIENT_CONTENT_TYPE, ...headers },\n      body   : JSON.stringify(msg)\n    })\n      .then(\n        handleSuccess({ request, resolve, reject }),\n        handleError({ request, reject })\n      );\n  });\n}\n\nfunction handleSuccess({ request, resolve, reject }) {\n  return response => {\n    const _handleError = handleError({ request, reject });\n\n    response\n      .json()\n      .then(\n        // Если ответ корректно распарсился\n        (json = {}) => {\n          // Разберем ответ - данная структура обязательна для клиентских ответов\n          const {\n            [ RESPONSE_PROPERTY_STATUS ]:status,\n            [ RESPONSE_PROPERTY_RESULT ]:result\n          } = json;\n\n          // Если статус результата - успех, то завершим работу вернув результат\n          if (status === RESPONSE_STATUS_SUCCESS) {\n            return resolve(result);\n          }\n\n          // Если статус результата - ошибка, то вызовем обработчик ошибок\n          if (status === RESPONSE_STATUS_ERROR) {\n            return _handleError(result);\n          }\n\n          // Если что-то непонятное - вызовем обработчик с ошибкой\n          return _handleError({\n            code   : `${ ERROR_CODE_PREFIX }/unknown.response.structure`,\n            message: `Ответ клиента неизвестной структуры`,\n            details: json\n          });\n        },\n        // Если ошибка парсинга - вызовем обработчик ошибок\n        _handleError\n      );\n  };\n}\n\nfunction handleError({ request, reject }) {\n  return e => {\n    let error;\n\n    switch (e.code) {\n      // Возникает когда нет сервиса к которому обращаемся\n      case 'ECONNREFUSED':\n        error = {\n          code   : `${ ERROR_CODE_PREFIX }/service.not.available`,\n          message: `Клиент по запросу (${ request.id }) недоступен`\n        };\n        break;\n      default: error = {\n        code   : e.code || e.status,\n        message: e.message || e.statusText,\n        details: e.details || undefined\n      };\n    }\n\n    reject(error);\n  };\n}"]}