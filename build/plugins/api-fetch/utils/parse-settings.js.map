{"version":3,"sources":["../../../../src/plugins/api-fetch/utils/parse-settings.js"],"names":["ERROR_TYPE","SshSettingsIncorrectError","message","url","join","EOL","type","SshSettingsUserNotFoundError","SshSettingsHostNotFoundError","SshSettingsPortNotFoundError","app","settings","protocol","host","port","ssh","agent","other","indexOf","split","sshUser","sshUrlOptions","clientOptions","sshHost","sshPort","debugInfo","sshOptions","error","log","username","privateKey","resolve","length"],"mappings":"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","file":"parse-settings.js","sourcesContent":["import TypedError from 'error/typed';\nimport os from 'os';\nimport path from 'path';\nimport sshAgent from 'http-ssh-agent';\nimport isString from 'lodash.isstring';\nimport { SSH_HOST, SSH_PORT, SSH_KEY_PATH } from './../constants';\n\nconst ERROR_TYPE = 'micro.plugin.fetch.ssh.options.incorrect';\n\nconst SshSettingsIncorrectError = TypedError({\n  message: [\n    '{name}: Не корректные настройки SSH API',\n    'Пример настроек', { url: 'sshUser@sshHost:sshPort@host:port' },\n  ].join(os.EOL),\n  type: `${ ERROR_TYPE }`\n});\n\nconst SshSettingsUserNotFoundError = TypedError({\n  message: '{name}: Отсутвует SSH USER',\n  type   : `${ ERROR_TYPE }.not.found.user`\n});\n\nconst SshSettingsHostNotFoundError = TypedError({\n  message: '{name}: Отсутвует SSH HOST',\n  type   : `${ ERROR_TYPE }.not.found.host`\n});\n\nconst SshSettingsPortNotFoundError = TypedError({\n  message: '{name}: Отсутвует SSH PORT',\n  type   : `${ ERROR_TYPE }.not.found.host`\n});\n\n\nexport default (app, settings) => {\n  if (isString(settings)) {\n    settings = { url: settings };\n  }\n  const protocol = 'http';\n  let {\n    url = '',\n    host = '',\n    port = '',\n    ssh = {},\n    agent = null,\n    ...other\n  } = settings;\n\n  if (!!~url.indexOf('@')) {\n    let [ sshUser, sshUrlOptions, clientOptions ] = url.split('@');\n\n    if (!clientOptions) {\n      clientOptions = sshUrlOptions;\n      sshUrlOptions = null;\n    }\n\n    let [ sshHost = SSH_HOST, sshPort = SSH_PORT ] = sshUrlOptions? sshUrlOptions.split(':') : [];\n\n    if (!sshUser && !sshHost && !sshPort) {\n      throw SshSettingsIncorrectError();\n    }\n\n    if (!sshUser || !sshHost || !sshPort) {\n      let debugInfo = { sshOptions, sshUrlOptions, clientOptions, sshUser, sshHost, sshPort, settings };\n      let error;\n\n      if (!sshUser) { error = SshSettingsUserNotFoundError() }\n      if (!sshHost) { error = SshSettingsHostNotFoundError() }\n      if (!sshPort) { error = SshSettingsPortNotFoundError() }\n      app.log.error(error.message, debugInfo);\n      throw error;\n    }\n\n    url = clientOptions;\n    ssh = {\n      host      : sshHost,\n      port      : sshPort,\n      username  : sshUser,\n      privateKey: path.resolve(SSH_KEY_PATH),\n      ...ssh\n    };\n    agent = sshAgent(ssh);\n  }\n\n  if (!!url && url.length) {\n    [ host, port ] = url.split(':');\n  }\n\n  if (port) {\n    port = ':' + port;\n  }\n\n  return { url: `${ protocol }://${ host }${ port }`, ssh, agent, ...other };\n};"]}