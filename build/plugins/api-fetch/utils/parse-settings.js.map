{"version":3,"sources":["../../../../src/plugins/api-fetch/utils/parse-settings.js"],"names":["app","settings","url","protocol","host","port","ssh","agent","other","indexOf","split","sshOptions","sshUrlOptions","clientOptions","sshUser","sshHost","sshPort","log","error","action","message","debugInfo","username","privateKey","resolve","length"],"mappings":"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","file":"parse-settings.js","sourcesContent":["import path from 'path';\nimport sshAgent from 'http-ssh-agent';\nimport isString from 'lodash.isstring';\nimport { SSH_HOST, SSH_PORT, SSH_KEY_PATH } from './../constants';\nimport error, {\n  ERROR_SSH_SETTINGS_INCORRECT\n} from './../errors/error';\n\nexport default (app, settings) => {\n  if (isString(settings)) {\n    settings = { url: settings };\n  }\n  const protocol = 'http';\n  let {\n    url = '',\n    host = '',\n    port = '',\n    ssh = {},\n    agent = null,\n    ...other\n  } = settings;\n\n  if (!!~url.indexOf('ssh')) {\n    let [ sshOptions, sshUrlOptions, clientOptions ] = url.split('@');\n\n    if (!clientOptions) {\n      clientOptions = sshUrlOptions;\n      sshUrlOptions = null;\n    }\n\n    let [ , sshUser ] = sshOptions.split('//') || [];\n    let [ sshHost = SSH_HOST, sshPort = SSH_PORT ] = sshUrlOptions? sshUrlOptions.split(':') : [];\n\n    if (!sshUser && !sshHost && !sshPort) {\n      app.log.error('Не корректные настройки SSH API', settings);\n      app.log.error('Пример настроек', { url: 'ssh//sshUser@sshHost:sshPort@host:port' });\n      throw error({ action: 'parse-settings', message: ERROR_SSH_SETTINGS_INCORRECT });\n    }\n\n    if (!sshUser || !sshHost || !sshPort) {\n      let debugInfo = { sshOptions, sshUrlOptions, clientOptions, sshUser, sshHost, sshPort, settings };\n      if (!sshUser) { app.log.error('Отсутвует SSH USER', debugInfo) }\n      if (!sshHost) { app.log.error('Отсутвует SSH HOST', debugInfo) }\n      if (!sshPort) { app.log.error('Отсутвует SSH PORT', debugInfo) }\n      throw error({ action: 'parse-settings', message: ERROR_SSH_SETTINGS_INCORRECT });\n    }\n\n    url = clientOptions;\n    ssh = {\n      host      : sshHost,\n      port      : sshPort,\n      username  : sshUser,\n      privateKey: path.resolve(SSH_KEY_PATH),\n      ...ssh\n    };\n    agent = sshAgent(ssh);\n  }\n\n  if (!!url && url.length) {\n    [ host, port ] = url.split(':');\n  }\n\n  if (port) {\n    port = ':' + port;\n  }\n\n  return { url: `${ protocol }://${ host }${ port }`, ssh, agent, ...other };\n};"]}