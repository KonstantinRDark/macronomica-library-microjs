{"version":3,"sources":["../../../../src/plugins/api-fetch/utils/parse-settings.js"],"names":["app","settings","url","protocol","host","port","ssh","agent","other","indexOf","split","sshOptions","sshUrlOptions","clientOptions","sshUser","sshHost","sshPort","log","error","action","message","username","privateKey","resolve","process","env","HOME","length"],"mappings":";;;;;;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;;;;;kBAIe,CAACA,GAAD,EAAMC,QAAN,KAAmB;AAChC,MAAI,sBAASA,QAAT,CAAJ,EAAwB;AACtBA,eAAW,EAAEC,KAAKD,QAAP,EAAX;AACD;AACD,QAAME,WAAW,MAAjB;AAJgC,kBAY5BF,QAZ4B;AAAA,gCAM9BC,GAN8B;AAAA,MAM9BA,GAN8B,iCAMxB,EANwB;AAAA,iCAO9BE,IAP8B;AAAA,MAO9BA,IAP8B,kCAOvB,EAPuB;AAAA,iCAQ9BC,IAR8B;AAAA,MAQ9BA,IAR8B,kCAQvB,EARuB;AAAA,gCAS9BC,GAT8B;AAAA,MAS9BA,GAT8B,iCASxB,EATwB;AAAA,kCAU9BC,KAV8B;;AAAA,MAU9BA,KAV8B,mCAUtB,IAVsB;AAAA,MAW3BC,KAX2B;;AAchC,MAAI,CAAC,CAAC,CAACN,IAAIO,OAAJ,CAAY,KAAZ,CAAP,EAA2B;AAAA,qBAC0BP,IAAIQ,KAAJ,CAAU,GAAV,CAD1B;AAAA;;AAAA,QACnBC,UADmB;AAAA,QACPC,aADO;AAAA,QACQC,aADR;;AAAA,eAELF,WAAWD,KAAX,CAAiB,IAAjB,KAA0B,EAFrB;AAAA;;AAAA,QAEjBI,OAFiB;;AAAA,gBAGEF,cAAcF,KAAd,CAAoB,GAApB,KAA4B,EAH9B;AAAA;;AAAA,QAGnBK,OAHmB;AAAA,QAGVC,OAHU;;;AAKzB,QAAI,CAACF,OAAD,IAAY,CAACC,OAAb,IAAwB,CAACC,OAA7B,EAAsC;AACpChB,UAAIiB,GAAJ,CAAQC,KAAR,CAAc,iCAAd,EAAiDjB,QAAjD;AACAD,UAAIiB,GAAJ,CAAQC,KAAR,CAAc,iBAAd,EAAiC;AAC/BhB,aAAK;AAD0B,OAAjC;AAGA,YAAM,qBAAM,EAAEiB,QAAQ,gBAAV,EAA4BC,4CAA5B,EAAN,CAAN;AACD;;AAEDlB,UAAMW,aAAN;AACAN,YAAQ;AACNH,YAAYW,OADN;AAENV,YAAYW,OAFN;AAGNK,gBAAYP,OAHN;AAINQ,kBAAY,eAAKC,OAAL,CAAaC,QAAQC,GAAR,CAAYC,IAAZ,GAAmB,cAAhC;AAJN,OAKHpB,GALG,EAAR;AAOD;;AAED,MAAI,CAAC,CAACJ,GAAF,IAASA,IAAIyB,MAAjB,EAAyB;AAAA,sBACNzB,IAAIQ,KAAJ,CAAU,GAAV,CADM;;AAAA;;AACrBN,QADqB;AACfC,QADe;AAExB;;AAED,MAAIA,IAAJ,EAAU;AACRA,WAAO,MAAMA,IAAb;AACD;;AAED,oBAASH,KAAM,IAAGC,QAAU,QAAMC,IAAM,KAAGC,IAAM,GAAjD,EAAoDE,KAApD,IAA8DC,KAA9D;AACD,C","file":"parse-settings.js","sourcesContent":["import path from 'path';\nimport sshAgent from 'http-ssh-agent';\nimport isString from 'lodash.isstring';\nimport error, {\n  ERROR_SSH_SETTINGS_INCORRECT\n} from './../errors/error';\n\nexport default (app, settings) => {\n  if (isString(settings)) {\n    settings = { url: settings };\n  }\n  const protocol = 'http';\n  let {\n    url = '',\n    host = '',\n    port = '',\n    ssh = {},\n    agent = null,\n    ...other\n  } = settings;\n\n  if (!!~url.indexOf('ssh')) {\n    let [ sshOptions, sshUrlOptions, clientOptions ] = url.split('@');\n    let [ , sshUser ] = sshOptions.split('//') || [];\n    let [ sshHost, sshPort ] = sshUrlOptions.split(':') || [];\n\n    if (!sshUser || !sshHost || !sshPort) {\n      app.log.error('Не корректные настройки SSH API', settings);\n      app.log.error('Пример настроек', {\n        url: 'ssh//sshUser@sshHost:sshPort@host:port'\n      });\n      throw error({ action: 'parse-settings', message: ERROR_SSH_SETTINGS_INCORRECT });\n    }\n\n    url = clientOptions;\n    agent = sshAgent({\n      host      : sshHost,\n      port      : sshPort,\n      username  : sshUser,\n      privateKey: path.resolve(process.env.HOME + '/.ssh/id_rsa'),\n      ...ssh\n    });\n  }\n\n  if (!!url && url.length) {\n    [ host, port ] = url.split(':');\n  }\n\n  if (port) {\n    port = ':' + port;\n  }\n\n  return { url: `${ protocol }://${ host }${ port }`, agent, ...other };\n};"]}