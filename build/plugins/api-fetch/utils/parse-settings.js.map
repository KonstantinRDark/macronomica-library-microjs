{"version":3,"sources":["../../../../src/plugins/api-fetch/utils/parse-settings.js"],"names":["ERROR_TYPE","SshSettingsIncorrectError","message","url","join","EOL","type","SshSettingsUserNotFoundError","SshSettingsPrivateKeyNotFoundError","path","SshSettingsHostNotFoundError","SshSettingsPortNotFoundError","SettingsNotFoundError","clientName","app","name","settings","error","log","protocol","host","port","ssh","agent","other","indexOf","split","sshUser","sshUrlOptions","clientOptions","sshHost","sshPort","debugInfo","sshOptions","privateKey","resolve","existsSync","username","length"],"mappings":"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","file":"parse-settings.js","sourcesContent":["import TypedError from 'error/typed';\nimport os from 'os';\nimport fs from 'fs';\nimport path from 'path';\nimport sshAgent from 'http-ssh-agent';\nimport isString from 'lodash.isstring';\nimport isEmpty from 'lodash.isempty';\nimport { SSH_HOST, SSH_PORT, SSH_KEY_PATH } from './../constants';\n\nconst ERROR_TYPE = 'micro.plugin.api-fetch.settings';\n\nconst SshSettingsIncorrectError = TypedError({\n  message: [\n    '{name}: Не корректные настройки SSH API',\n    'Пример настроек', { url: 'sshUser@sshHost:sshPort@host:port' },\n  ].join(os.EOL),\n  type: `${ ERROR_TYPE }.ssh.incorrect`\n});\n\nconst SshSettingsUserNotFoundError = TypedError({\n  message: '{name}: Отсутвует SSH USER',\n  type   : `${ ERROR_TYPE }.ssh.incorrect.not.found.user`\n});\n\nconst SshSettingsPrivateKeyNotFoundError = TypedError({\n  message: '{name}: Отсутвует ssh private key in {path}',\n  type   : `${ ERROR_TYPE }.ssh.incorrect.not.found.private.key`,\n  path   : null\n});\n\nconst SshSettingsHostNotFoundError = TypedError({\n  message: '{name}: Отсутвует SSH HOST',\n  type   : `${ ERROR_TYPE }.ssh.incorrect.not.found.host`\n});\n\nconst SshSettingsPortNotFoundError = TypedError({\n  message: '{name}: Отсутвует SSH PORT',\n  type   : `${ ERROR_TYPE }.ssh.incorrect.not.found.host`\n});\n\nconst SettingsNotFoundError = TypedError({\n  message   : '{name}: Отсутвуют настройки для клиента {clientName}',\n  type      : `${ ERROR_TYPE }.not.found`,\n  clientName: null\n});\n\nexport default (app, name, settings) => {\n  if (isString(settings)) {\n    settings = { url: settings };\n  }\n\n  if (isEmpty(settings)) {\n    const error = SettingsNotFoundError({ clientName: name });\n    app.log.error(error);\n    throw error;\n  }\n\n  const protocol = 'http';\n  let {\n    url = '',\n    host = '',\n    port = '',\n    ssh = {},\n    agent = null,\n    ...other\n  } = settings;\n\n  if (!!~url.indexOf('@')) {\n    let [ sshUser, sshUrlOptions, clientOptions ] = url.split('@');\n\n    if (!clientOptions) {\n      clientOptions = sshUrlOptions;\n      sshUrlOptions = null;\n    }\n\n    let [ sshHost = SSH_HOST, sshPort = SSH_PORT ] = sshUrlOptions? sshUrlOptions.split(':') : [];\n\n    if (!sshUser && !sshHost && !sshPort) {\n      throw SshSettingsIncorrectError();\n    }\n\n    if (!sshUser || !sshHost || !sshPort) {\n      let debugInfo = { sshOptions, sshUrlOptions, clientOptions, sshUser, sshHost, sshPort, settings };\n      let error;\n\n      if (!sshUser) { error = SshSettingsUserNotFoundError() }\n      if (!sshHost) { error = SshSettingsHostNotFoundError() }\n      if (!sshPort) { error = SshSettingsPortNotFoundError() }\n      app.log.error(error.message, debugInfo);\n      throw error;\n    }\n\n    const privateKey = path.resolve(SSH_KEY_PATH);\n\n    if (!fs.existsSync(privateKey)) {\n      throw SshSettingsPrivateKeyNotFoundError({ path: privateKey });\n    }\n\n    url = clientOptions;\n    ssh = {\n      host    : sshHost,\n      port    : sshPort,\n      username: sshUser,\n      privateKey,\n      ...ssh\n    };\n    agent = sshAgent(ssh);\n  }\n\n  if (!!url && url.length) {\n    [ host, port ] = url.split(':');\n  }\n\n  if (port) {\n    port = ':' + port;\n  }\n\n  return { url: `${ protocol }://${ host }${ port }`, ssh, agent, ...other };\n};"]}