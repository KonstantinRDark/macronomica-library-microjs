{"version":3,"sources":["../../../src/plugins/log-winston/index.js"],"names":["level","settings","micro","onClose","plugin","id","config","require","logger","Logger","log","levels","LEVELS","process","env","NODE_ENV","has","get","clientOpts","loggerSettings","add","transports","Elasticsearch","consistency","mappingTemplate","transformer","type","Console","label","formatter","options","severity","message","fields","error","timestamp","other","result","format","push","join","emit","on","meta"],"mappings":";;;;;;;;;;;;;;AAAA;;;;AACA;;;;AACA;;AACA;;;;AACA;;;;;;kBAEe,YAAiC;AAAA,iFAAP,EAAO;;AAAA,MAA9BA,KAA8B,QAA9BA,KAA8B;AAAA,MAApBC,QAAoB;;AAC9C,SAAO,CAACC,KAAD,YAAwB;AAAA,QAAdC,OAAc,SAAdA,OAAc;;AAC7B,UAAMC,SAAS,EAAEC,IAAI,sBAAN,EAAf;AACA,UAAMC,SAASC,QAAQ,QAAR,CAAf;AACA,QAAIC,SAAS,IAAK,kBAAQC,MAAb;AACXT,aAAQA,SAASE,MAAMQ,GAAN,CAAUV,KADhB;AAEXW,cAAQT,MAAMQ,GAAN,CAAUE;AAFP,OAGRX,QAHQ,EAAb;;AAMA,QAAIY,QAAQC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,IAAyCT,OAAOU,GAAP,CAAW,+BAAX,CAA7C,EAA0F;AAAA,wBAC3CV,OAAOW,GAAP,CAAW,+BAAX,CAD2C;AAAA,8CAClFC,UADkF;;AAAA,UAClFA,UADkF,yCACrE,EADqE;AAAA,UAC9DC,cAD8D;;;AAGxFX,aAAOY,GAAP,CAAW,kBAAQC,UAAR,CAAmBC,aAA9B;AACEC,qBAAiB,KADnB;AAEEC,yBAAiBjB,QAAQ,+BAAR,CAFnB;AAGEkB;AAHF,SAIKN,cAJL;AAKEnB,eAAiBA,SAASE,MAAMQ,GAAN,CAAUV,KALtC;AAMEkB;AACER,eAAK,CAAC;AACJgB,kBAAQ,OADJ;AAEJf,oBAAQ,CAAC,OAAD,EAAU,SAAV;AAFJ,WAAD;AADP,WAKKO,UALL;AANF;AAcD,KAjBD,MAiBO;AACLV,aAAOY,GAAP,CAAW,kBAAQC,UAAR,CAAmBM,OAA9B,EAAwC;AACtCC,eAAW1B,MAAMG,EADqB;AAEtCwB,mBAAWC,WAAW;AAAA,2BAOhB,yBAAUA,OAAV,CAPgB;;AAAA,gBAElBC,QAFkB,cAElBA,QAFkB;AAAA,gBAGlBC,OAHkB,cAGlBA,OAHkB;AAAA,6CAIlBC,MAJkB;AAAA,gEAIa,EAJb;AAAA,gBAIRC,KAJQ,qBAIRA,KAJQ;AAAA,gBAIED,MAJF;AAAA,gBAKLE,SALK,cAKlB,YALkB;AAAA,gBAMfC,KANe,wFAKlB,YALkB;;;AASpBA,gBAAMH,MAAN,GAAeA,MAAf;;AAEA,cAAII,SAAS,CACX,eAAKC,MAAL,CAAa,IAAIP,QAAU,KAAKC,OAAS,MAAzC,EAAgDI,KAAhD,CADW,CAAb;;AAIA,cAAIF,KAAJ,EAAW;AACTG,mBAAOE,IAAP,CAAY,eAAKD,MAAL,CAAa,IAAIP,QAAU,MAA3B,EAAkCG,KAAlC,CAAZ;AACD;;AAED,iBAAOG,OAAOG,IAAP,CAAY,IAAZ,CAAP;AACD;AAtBqC,OAAxC;AAwBD;;AAEDtC,UAAMuC,IAAN,CAAW,mBAAX;AACAvC,UAAMwC,EAAN,CAAS,KAAT,EAAgB;AAAA,UAAG1C,KAAH,SAAGA,KAAH;AAAA,UAAUgC,OAAV,SAAUA,OAAV;AAAA,UAAmBW,IAAnB,SAAmBA,IAAnB;AAAA,aAA8BnC,OAAQR,KAAR,EAAgBgC,OAAhB,EAAyBW,IAAzB,CAA9B;AAAA,KAAhB;;AAEA,WAAOvC,MAAP;AACD,GAzDD;AA0DD,C","file":"index.js","sourcesContent":["import util from 'util';\nimport winston from 'winston';\nimport 'winston-elasticsearch';\nimport genid from './../../utils/genid';\nimport formatter from './formatter';\n\nexport default ({ level, ...settings } = {}) => {\n  return (micro, { onClose }) => {\n    const plugin = { id: genid() };\n    const config = require('config');\n    let logger = new (winston.Logger)({\n      level : level || micro.log.level,\n      levels: micro.log.LEVELS,\n      ...settings\n    });\n\n    if (process.env.NODE_ENV === 'production' && config.has('plugins.winston-elasticsearch')) {\n      let { clientOpts = {}, ...loggerSettings } = config.get('plugins.winston-elasticsearch');\n\n      logger.add(winston.transports.Elasticsearch, {\n        consistency    : false,\n        mappingTemplate: require('./elasticsearch-template.json'),\n        transformer    : formatter,\n        ...loggerSettings,\n        level          : level || micro.log.level,\n        clientOpts     : {\n          log: [{\n            type  : 'stdio',\n            levels: ['error', 'warning']\n          }],\n          ...clientOpts\n        }\n      });\n    } else {\n      logger.add(winston.transports.Console, ({\n        label    : micro.id,\n        formatter: options => {\n          const {\n            severity,\n            message,\n            fields: { error, ...fields } = {},\n            '@timestamp':timestamp,\n            ...other\n          } = formatter(options);\n\n          other.fields = fields;\n\n          let result = [\n            util.format(`[${ severity }] ${ message }: %j`, other)\n          ];\n\n          if (error) {\n            result.push(util.format(`[${ severity }] %s`, error));\n          }\n\n          return result.join('\\n');\n        }\n      }));\n    }\n\n    micro.emit('plugin.logger.use');\n    micro.on('log', ({ level, message, meta }) => logger[ level ](message, meta));\n\n    return plugin;\n  }\n};"]}