{"version":3,"sources":["../../../src/plugins/log-winston/index.js"],"names":["level","settings","micro","onClose","plugin","id","logger","Logger","log","levels","LEVELS","process","env","NODE_ENV","has","get","clientOpts","loggerSettings","add","transports","Elasticsearch","consistency","mappingTemplate","require","transformer","type","Console","label","emit","on","message","payload"],"mappings":";;;;;;;;AAAA;;;;AACA;;;;AACA;;AACA;;;;;;;;kBAEe,YAAiC;AAAA,iFAAP,EAAO;;AAAA,MAA9BA,KAA8B,QAA9BA,KAA8B;AAAA,MAApBC,QAAoB;;AAC9C,SAAO,CAACC,KAAD,YAAwB;AAAA,QAAdC,OAAc,SAAdA,OAAc;;AAC7B,UAAMC,SAAS,EAAEC,IAAI,sBAAN,EAAf;;AAEA,QAAIC,SAAS,IAAK,kBAAQC,MAAb;AACXP,aAAQA,SAASE,MAAMM,GAAN,CAAUR,KADhB;AAEXS,cAAQP,MAAMM,GAAN,CAAUE;AAFP,OAGRT,QAHQ,EAAb;;AAMA,QAAIU,QAAQC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,IAAyC,iBAAOC,GAAP,CAAW,+BAAX,CAA7C,EAA0F;AAAA,wBAC3C,iBAAOC,GAAP,CAAW,+BAAX,CAD2C;AAAA,8CAClFC,UADkF;;AAAA,UAClFA,UADkF,yCACrE,EADqE;AAAA,UAC9DC,cAD8D;;AAGxFX,aAAOY,GAAP,CAAW,kBAAQC,UAAR,CAAmBC,aAA9B;AACEC,qBAAiB,KADnB;AAEEC,yBAAiBC,QAAQ,+BAAR,CAFnB;AAGEC,qBAAiBD,QAAQ,6BAAR;AAHnB,SAIKN,cAJL;AAKEjB,eAAiBA,SAASE,MAAMM,GAAN,CAAUR,KALtC;AAMEgB;AACER,eAAK,CAAC;AACJiB,kBAAQ,OADJ;AAEJhB,oBAAQ,CAAC,OAAD,EAAU,SAAV;AAFJ,WAAD;AADP,WAKKO,UALL;AANF;AAcD,KAjBD,MAiBO;AACLV,aAAOY,GAAP,CAAW,kBAAQC,UAAR,CAAmBO,OAA9B,EAAwC;AACtCC,eAAOzB,MAAMG;AADyB,OAAxC;AAGD;;AAEDH,UAAM0B,IAAN,CAAW,mBAAX;AACA1B,UAAM2B,EAAN,CAAS,KAAT,EAAgB;AAAA,UAAG7B,KAAH,SAAGA,KAAH;AAAA,UAAU8B,OAAV,SAAUA,OAAV;AAAA,UAAmBC,OAAnB,SAAmBA,OAAnB;AAAA,aAAiCzB,OAAQN,KAAR,EAAgB8B,OAAhB,EAAyBC,OAAzB,CAAjC;AAAA,KAAhB;;AAEA,WAAO3B,MAAP;AACD,GApCD;AAqCD,C","file":"index.js","sourcesContent":["import config from 'config';\nimport winston from 'winston';\nimport 'winston-elasticsearch';\nimport genid from './../../utils/genid';\n\nexport default ({ level, ...settings } = {}) => {\n  return (micro, { onClose }) => {\n    const plugin = { id: genid() };\n\n    let logger = new (winston.Logger)({\n      level : level || micro.log.level,\n      levels: micro.log.LEVELS,\n      ...settings\n    });\n\n    if (process.env.NODE_ENV === 'production' && config.has('plugins.winston-elasticsearch')) {\n      let { clientOpts = {}, ...loggerSettings } = config.get('plugins.winston-elasticsearch');\n\n      logger.add(winston.transports.Elasticsearch, {\n        consistency    : false,\n        mappingTemplate: require('./elasticsearch-template.json'),\n        transformer    : require('./elasticsearch-transformer'),\n        ...loggerSettings,\n        level          : level || micro.log.level,\n        clientOpts     : {\n          log: [{\n            type  : 'stdio',\n            levels: ['error', 'warning']\n          }],\n          ...clientOpts\n        }\n      });\n    } else {\n      logger.add(winston.transports.Console, ({\n        label: micro.id\n      }));\n    }\n\n    micro.emit('plugin.logger.use');\n    micro.on('log', ({ level, message, payload }) => logger[ level ](message, payload));\n\n    return plugin;\n  }\n};"]}