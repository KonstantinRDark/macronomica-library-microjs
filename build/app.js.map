{"version":3,"sources":["../src/app.js"],"names":["Microjs","constructor","settings","id","state","manager","gex","subscribers","run","add","end","time","started","Date","now","running","log","use","del","api","act","level","maxListeners","defaultMaxListeners","setMaxListeners","on","app","info"],"mappings":";;;;;;AAAA;;;;AACA;;;;AAEA;;;;AACA;;;;AAEA;;;;AAEA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AAEA;;;;AAEA;;;;;AAKe,MAAMA,OAAN,0BAAmC;;AA4BhD;;;;;;;AAZA;;;;AAiCAC,gBAA2B;AAAA,QAAfC,QAAe,uEAAJ,EAAI;;AACzB;AADyB,SAnC3BC,EAmC2B,GAnCtB,sBAmCsB;AAAA,SA7B3BC,KA6B2B;AAAA,SAvB3BC,OAuB2B,GAvBjB,sBAAO,EAAEC,KAAK,IAAP,EAAP,CAuBiB;AAAA,SAhB3BC,WAgB2B,GAhBb;AACZC,WAAK,EADO,EACE;AACdC,WAAK,EAFO,EAEE;AACdC,WAAK,EAHO,CAGE;AAHF,KAgBa;AAAA,SAL3BC,IAK2B,GALpB;AACLC,eAASC,KAAKC,GAAL,EADJ;AAELC,eAAS;AAFJ,KAKoB;AAAA,SA6B3BC,GA7B2B,GA6BrB,mBAAI,IAAJ,CA7BqB;AAAA,SA8B3BC,GA9B2B,GA8BrB,mBAAI,IAAJ,CA9BqB;AAAA,SA+B3BR,GA/B2B,GA+BrB,mBAAI,IAAJ,CA/BqB;AAAA,SAgC3BS,GAhC2B,GAgCrB,mBAAI,IAAJ,CAhCqB;AAAA,SAiC3BC,GAjC2B,GAiCrB,mBAAI,IAAJ,CAjCqB;AAAA,SAkC3BC,GAlC2B,GAkCrB,mBAAI,IAAJ,CAlCqB;AAAA,SAmC3BV,GAnC2B,GAmCrB,mBAAI,IAAJ,CAnCqB;AAAA,SAoC3BF,GApC2B,GAoCrB,mBAAI,IAAJ,CApCqB;AAAA,UAEjBL,EAFiB,GAE+DD,QAF/D,CAEjBC,EAFiB;AAAA,0BAE+DD,QAF/D,CAEbmB,KAFa;AAAA,UAEbA,KAFa,mCAEL,KAAKL,GAAL,CAASK,KAFJ;AAAA,gCAE+DnB,QAF/D,CAEWoB,YAFX;AAAA,UAEWA,YAFX,yCAE0B,iBAAaC,mBAFvC;;;AAIzB,QAAI,CAAC,CAACpB,EAAN,EAAU;AACR,WAAKA,EAAL,GAAUA,EAAV;AACD;;AAED,SAAKD,QAAL,GAAgBA,QAAhB;AACA,SAAKc,GAAL,CAASK,KAAT,GAAiBA,KAAjB;AACA,SAAKG,eAAL,CAAqBF,YAArB;;AAEA,SACGL,GADH,CACO,4BADP,EAEGQ,EAFH,CAEM,SAFN,EAEiBC,OAAO;AACpBA,UAAItB,KAAJ;AACAsB,UAAIf,IAAJ,CAASI,OAAT,GAAmBF,KAAKC,GAAL,EAAnB;AACAY,UAAIV,GAAJ,CAAQW,IAAR,CAAa,CACX,sEADW,EAEX,oBAAoBD,IAAIvB,EAFb,EAGV,mBAAkB,6BAAcuB,IAAIf,IAAJ,CAASC,OAAvB,CAAiC,GAHzC,EAIV,mBAAkB,6BAAcc,IAAIf,IAAJ,CAASI,OAAvB,CAAiC,GAJzC,EAKX,sEALW,CAAb;AAOD,KAZH;;AAcA,SAAKC,GAAL,CAASW,IAAT,CAAe,eAAc,6BAAc,KAAKhB,IAAL,CAAUC,OAAxB,CAAkC,GAA/D;AACD;;AArCD;;;;;;;AAjBA;;;;;AArBA;;;;AAIA;;;;;AAKA;;;;AAVgD;kBAA7BZ,O","file":"app.js","sourcesContent":["import EventEmitter from 'events';\nimport Patrun from 'patrun';\n\nimport genid from './utils/genid';\nimport dateIsoString from './utils/date-iso-string';\n\nimport HealthCheckModule from './modules/health-check';\n\nimport log from './methods/log';\nimport use from './methods/use';\nimport add from './methods/add';\nimport del from './methods/del';\nimport act from './methods/act';\nimport api from './methods/api';\nimport end from './methods/end';\nimport run from './methods/run';\n\nimport { STATE_START, STATE_RUN } from './constants';\n\n/**\n * @namespace app\n * @class Microjs\n * @augments EventEmitter\n */\nexport default class Microjs extends EventEmitter {\n  /**\n   * @namespace app\n   * @memberof app.on\n   */\n  /**\n   * @namespace app\n   * @memberof app.emit\n   */\n\n  /**\n   * @namespace app.id\n   * @type {string}\n   */\n  id = genid();\n\n  /**\n   * @namespace app.state\n   * @type {string}\n   */\n  state = STATE_START;\n\n  /**\n   * @namespace app.manager\n   * @type {object}\n   */\n  manager = Patrun({ gex: true });\n\n  /**\n   * Список подписчиков\n   * @namespace app.subscribers\n   * @type {{ run: Array<function>, add: Array<function>, end: Array<function> }}\n   */\n  subscribers = {\n    run: [],      // подписчики для этапа запуска работы\n    add: [],      // подписчики для этапа регистрации действий\n    end: []       // подписчики для этапа завершения работы\n  };\n\n  /**\n   * Метрики времени\n   * @namespace app.time\n   * @type {{ started: number, running: ?number }}\n   */\n  time = {\n    started: Date.now(),\n    running: null\n  };\n\n  constructor(settings = {}) {\n    super();\n    const { id, level = this.log.level, maxListeners = EventEmitter.defaultMaxListeners } = settings;\n\n    if (!!id) {\n      this.id = id;\n    }\n\n    this.settings = settings;\n    this.log.level = level;\n    this.setMaxListeners(maxListeners);\n\n    this\n      .use(HealthCheckModule())\n      .on('running', app => {\n        app.state = STATE_RUN;\n        app.time.running = Date.now();\n        app.log.info([\n          '============================ app-running ===========================',\n          '# Instance Id: ' + app.id,\n          `# Started At : ${ dateIsoString(app.time.started) }`,\n          `# Running At : ${ dateIsoString(app.time.running) }`,\n          '========================== app-running-end =========================',\n        ]);\n      });\n\n    this.log.info(`started at ${ dateIsoString(this.time.started) }`);\n  }\n\n  log = log(this);\n  use = use(this);\n  add = add(this);\n  del = del(this);\n  api = api(this);\n  act = act(this);\n  end = end(this);\n  run = run(this);\n}"]}