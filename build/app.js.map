{"version":3,"sources":["../src/app.js"],"names":["Microjs","constructor","settings","id","name","process","env","APP_NAME","state","manager","gex","defaultTransportPlugin","defaultLogPlugin","modules","subscribers","run","add","end","time","started","Date","now","running","log","use","del","api","act","initialize","on","onRunning","then","exit","app","level","plugins","maxListeners","defaultMaxListeners","setMaxListeners","Object","assign","Array","isArray","forEach","plugin","module","info","startedAt","runningAt"],"mappings":";;;;;;AAAA;;;;AACA;;;;AAEA;;;;AACA;;;;AAEA;;;;AACA;;;;AAEA;;;;AAEA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AAEA;;;;AAEA;;;;;AAKe,MAAMA,OAAN,0BAAmC;;AA6EhD;;;;;;AArBA;;;;;;;AAhBA;;;;;;;AAbA;;;;;AAZA;;;;AAkEAC,gBAA2B;AAAA,QAAfC,QAAe,uEAAJ,EAAI;;AACzB;AADyB,SAnE3BC,EAmE2B,GAnEtB,sBAmEsB;AAAA,SA9D3BC,IA8D2B,GA9DpBC,QAAQC,GAAR,CAAYC,QAAZ,IAAwB,SA8DJ;AAAA,SAxD3BC,KAwD2B;AAAA,SAlD3BC,OAkD2B,GAlDjB,sBAAO,EAAEC,KAAK,IAAP,EAAP,CAkDiB;AAAA,SA3C3BC,sBA2C2B;AAAA,SApC3BC,gBAoC2B;AAAA,SA7B3BC,OA6B2B,GA7BjB,CACR,4BADQ,CA6BiB;AAAA,SApB3BC,WAoB2B,GApBb;AACZC,WAAK,EADO,EACE;AACdC,WAAK,EAFO,EAEE;AACdC,WAAK,EAHO,CAGE;AAHF,KAoBa;AAAA,SAT3BC,IAS2B,GATpB;AACLC,eAASC,KAAKC,GAAL,EADJ;AAELC,eAAS;AAFJ,KASoB;AAAA,SAO3BC,GAP2B,GAOrB,mBAAI,IAAJ,CAPqB;AAAA,SAQ3BC,GAR2B,GAQrB,mBAAI,IAAJ,CARqB;AAAA,SAS3BR,GAT2B,GASrB,mBAAI,IAAJ,CATqB;AAAA,SAU3BS,GAV2B,GAUrB,mBAAI,IAAJ,CAVqB;AAAA,SAW3BC,GAX2B,GAWrB,mBAAI,IAAJ,CAXqB;AAAA,SAY3BC,GAZ2B,GAYrB,mBAAI,IAAJ,CAZqB;AAAA,SAa3BV,GAb2B,GAarB,mBAAI,IAAJ,CAbqB;AAAA,SAc3BF,GAd2B,GAcrB,mBAAI,IAAJ,CAdqB;AAEzBa,eAAW,IAAX,EAAiB1B,QAAjB;AACA,SAAK2B,EAAL,CAAQ,SAAR,EAAmBC,SAAnB;AACAzB,YAAQwB,EAAR,CAAW,QAAX,EAAqB,MAAM,KAAKZ,GAAL,GAAWc,IAAX,CAAgB1B,QAAQ2B,IAAxB,EAA8B3B,QAAQ2B,IAAtC,CAA3B;AACD;;AAnBD;;;;;;;AApBA;;;;;;;AAdA;;;;;;;AAZA;;;;;AApBA;;;;AAIA;;;;;AAKA;;;;AAVgD;;kBAA7BhC,O,EAkGrB;;;;;AAIA,SAAS4B,UAAT,CAAoBK,GAApB,EAAyB/B,QAAzB,EAAmC;AAAA,qBAQ7BA,QAR6B,CAE/BC,EAF+B;AAAA,QAE/BA,EAF+B,gCAE1B8B,IAAI9B,EAFsB;AAAA,uBAQ7BD,QAR6B,CAG/BE,IAH+B;AAAA,QAG/BA,IAH+B,kCAGxB6B,IAAI7B,IAHoB;AAAA,wBAQ7BF,QAR6B,CAI/BgC,KAJ+B;AAAA,QAI/BA,KAJ+B,mCAIvBD,IAAIV,GAAJ,CAAQW,KAJe;AAAA,0BAQ7BhC,QAR6B,CAK/BiC,OAL+B;AAAA,QAK/BA,OAL+B,qCAKrB,EALqB;AAAA,0BAQ7BjC,QAR6B,CAM/BW,OAN+B;AAAA,QAM/BA,OAN+B,qCAMrBoB,IAAIpB,OANiB;AAAA,8BAQ7BX,QAR6B,CAO/BkC,YAP+B;AAAA,QAO/BA,YAP+B,yCAOhB,iBAAaC,mBAPG;;;AAUjCJ,MAAIV,GAAJ,CAAQW,KAAR,GAAgBA,KAAhB;AACAD,MAAIK,eAAJ,CAAoBF,YAApB;;AAEAG,SAAOC,MAAP,CAAcP,GAAd,EAAmB,EAAE9B,EAAF,EAAMC,IAAN,EAAYF,QAAZ,EAAnB;;AAEA+B,MAAIT,GAAJ,CAAQS,IAAIrB,gBAAJ,CAAqB,EAAEsB,KAAF,EAArB,CAAR;;AAEA,MAAIO,MAAMC,OAAN,CAAcP,OAAd,CAAJ,EAA4B;AAC1BA,YAAQQ,OAAR,CAAgBC,UAAUX,IAAIT,GAAJ,CAAQoB,MAAR,CAA1B;AACD;;AAED,MAAIH,MAAMC,OAAN,CAAc7B,OAAd,CAAJ,EAA4B;AAC1BA,YAAQ8B,OAAR,CAAgBE,UAAUZ,IAAIT,GAAJ,CAAQqB,MAAR,CAA1B;AACD;AACF;;AAED,SAASf,SAAT,CAAmBG,GAAnB,EAAwB;AACtBA,MAAIzB,KAAJ;AACAyB,MAAIf,IAAJ,CAASI,OAAT,GAAmBF,KAAKC,GAAL,EAAnB;AACAY,MAAIV,GAAJ,CAAQuB,IAAR,CAAa,aAAb,EAA4B;AAC1Bb,SAAK;AACHc,iBAAW,6BAAcd,IAAIf,IAAJ,CAASC,OAAvB,CADR;AAEH6B,iBAAW,6BAAcf,IAAIf,IAAJ,CAASI,OAAvB;AAFR;AADqB,GAA5B;AAMD","file":"app.js","sourcesContent":["import EventEmitter from 'events';\nimport Patrun from 'patrun';\n\nimport genid from './utils/genid';\nimport dateIsoString from './utils/date-iso-string';\n\nimport WinstonLogPlugin from './plugins/log-winston';\nimport NodeHttpPlugin from './plugins/node-http';\n\nimport HealthCheckModule from './modules/health-check';\n\nimport log from './methods/log';\nimport use from './methods/use';\nimport add from './methods/add';\nimport del from './methods/del';\nimport act from './methods/act';\nimport api from './methods/api';\nimport end from './methods/end';\nimport run from './methods/run';\n\nimport { STATE_START, STATE_RUN } from './constants';\n\n/**\n * @namespace app\n * @class Microjs\n * @augments EventEmitter\n */\nexport default class Microjs extends EventEmitter {\n  /**\n   * @namespace app\n   * @memberof app.on\n   */\n  /**\n   * @namespace app\n   * @memberof app.emit\n   */\n\n  /**\n   * @namespace app.id\n   * @type {string}\n   */\n  id = genid();\n  /**\n   * @namespace app.id\n   * @type {string}\n   */\n  name = process.env.APP_NAME || 'microjs';\n\n  /**\n   * @namespace app.state\n   * @type {string}\n   */\n  state = STATE_START;\n\n  /**\n   * @namespace app.manager\n   * @type {object}\n   */\n  manager = Patrun({ gex: true });\n\n  /**\n   * Плагин транспорта по умолчанию\n   * @namespace app.defaultTransportPlugin\n   * @type {function}\n   */\n  defaultTransportPlugin = NodeHttpPlugin;\n\n  /**\n   * Плагин логгера по умолчанию\n   * @namespace app.defaultLogPlugin\n   * @type {function}\n   */\n  defaultLogPlugin = WinstonLogPlugin;\n\n  /**\n   * Список модулей для инициализации\n   * @namespace app.modules\n   * @type {Array<function>}\n   */\n  modules = [\n    HealthCheckModule()\n  ];\n\n  /**\n   * Список подписчиков\n   * @namespace app.subscribers\n   * @type {{ run: Array<function>, add: Array<function>, end: Array<function> }}\n   */\n  subscribers = {\n    run: [],      // подписчики для этапа запуска работы\n    add: [],      // подписчики для этапа регистрации действий\n    end: []       // подписчики для этапа завершения работы\n  };\n\n  /**\n   * Метрики времени\n   * @namespace app.time\n   * @type {{ started: number, running: ?number }}\n   */\n  time = {\n    started: Date.now(),\n    running: null\n  };\n\n  /**\n   * @this app\n   * @param settings\n   */\n  constructor(settings = {}) {\n    super();\n    initialize(this, settings);\n    this.on('running', onRunning);\n    process.on('SIGINT', () => this.end().then(process.exit, process.exit));\n  }\n\n  log = log(this);\n  use = use(this);\n  add = add(this);\n  del = del(this);\n  api = api(this);\n  act = act(this);\n  end = end(this);\n  run = run(this);\n}\n\n/**\n * @param {app} app\n * @param {object} settings\n */\nfunction initialize(app, settings) {\n  const {\n    id = app.id,\n    name = app.name,\n    level = app.log.level,\n    plugins = [],\n    modules = app.modules,\n    maxListeners = EventEmitter.defaultMaxListeners\n  } = settings;\n\n  app.log.level = level;\n  app.setMaxListeners(maxListeners);\n\n  Object.assign(app, { id, name, settings });\n\n  app.use(app.defaultLogPlugin({ level }));\n\n  if (Array.isArray(plugins)) {\n    plugins.forEach(plugin => app.use(plugin));\n  }\n\n  if (Array.isArray(modules)) {\n    modules.forEach(module => app.use(module));\n  }\n}\n\nfunction onRunning(app) {\n  app.state = STATE_RUN;\n  app.time.running = Date.now();\n  app.log.info('App running', {\n    app: {\n      startedAt: dateIsoString(app.time.started),\n      runningAt: dateIsoString(app.time.running)\n    }\n  });\n}"]}